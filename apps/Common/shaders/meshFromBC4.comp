#include "cameraUtils.glsl"

layout(local_size_x = THREADS_PER_LOCALGROUP, local_size_y = THREADS_PER_LOCALGROUP, local_size_z = 1) in;

struct Vertex {
    vec3 position;
    vec3 color;
    vec3 normal;
    vec2 texCoords;
    vec3 tangent;
    vec3 bitangent;
};

struct Block{
    float max;
    float min;
    uint data[6];
};

layout(std430, binding = 0) buffer VertexBuffer {
    Vertex vertices[];
};

layout(std430, binding = 1) buffer IndexBuffer {
    uint indices[];
};

layout(std430, binding = 2) buffer BC4Buffer {
    Block bc4buffer[];
};

const uvec2 blockSize = uvec2(8, 8);

uniform vec2 depthMapSize;

uniform mat4 projection;
uniform mat4 projectionInverse;

uniform mat4 viewColor;
uniform mat4 viewInverseDepth;

uniform float near;
uniform float far;

uniform int surfelSize;

uniform bool unlinearizeDepth;

#define MAX_DEPTH 0.9999

#define VERTICES_IN_A_QUAD  4u
#define INDICES_IN_A_QUAD   6u

float LinearizeDepth(float depth) {
    float z = depth * 2.0 - 1.0; // back to NDC
    return (2.0 * near * far) / (far + near - z * (far - near));
}

float UnLinearizeDepth(float depth) {
    depth *= far;
    depth = max(depth, near);
    float z = (depth * (far + near) - 2.0 * near * far) / (depth * (far - near));
    return (z + 1.0) / 2.0;
}

float sampleBC4Buffer(vec2 pixelCoordNormalized) {
    uvec2 pixelCoord = uvec2(pixelCoordNormalized * depthMapSize); // normalized coord to integer pixel coord
    uvec2 blockCoord = pixelCoord / blockSize;
    uvec2 pixelInBlock = pixelCoord % blockSize;

    uint blockIndex = blockCoord.y * (uint(depthMapSize.x) / blockSize.x) + blockCoord.x; //index of this block in the BC4 buffer
    Block compressedBlock = bc4buffer[blockIndex];

    float maxVal = compressedBlock.max;
    float minVal = compressedBlock.min;

    uint pixelIndex = pixelInBlock.y * blockSize.x + pixelInBlock.x;
    uint globalBitIndex = pixelIndex * 3u;
    uint uintIndex = globalBitIndex / 32u; // 0-5
    uint bitOffset = globalBitIndex % 32u; // 0-31

    uint index;
    if (bitOffset <= 29u) {
        // Normal case: all 3 bits are in the current uint
        index = (compressedBlock.data[uintIndex] >> (29u - bitOffset)) & 0x7u;
    }
    else {
        // Split case: the 3 bits are split across two uints
        uint bitsInCurrent = 32u - bitOffset;
        uint bitsInNext = 3u - bitsInCurrent;

        // Get the bits from the current uint
        uint mask = 0u;
        if (bitsInCurrent == 1u) mask = 1u; // 0b01
        if (bitsInCurrent == 2u) mask = 3u; // 0b11
        uint upperBits = compressedBlock.data[uintIndex] & (mask);

        // Get the bits from the next uint (with wraparound)
        uint lowerBits = compressedBlock.data[(uintIndex + 1u) % 6u] >> (32u - bitsInNext);

        // Combine the bits
        index = (upperBits << bitsInNext) | lowerBits;
    }

    index = index & 0x7u; // Ensure index is a valid 3-bit number (0-7)

    float t = float(index) / 7.0;

    float depth = mix(minVal, maxVal, t);
    depth = min(depth, MAX_DEPTH);

    return unlinearizeDepth ? UnLinearizeDepth(depth) : depth;
}

void main() {
    vec2 size = vec2(depthMapSize) / vec2(surfelSize);

    vec2 surfelCoord = vec2(gl_GlobalInvocationID.xy);
    if (surfelCoord.x >= depthMapSize.x || surfelCoord.y >= depthMapSize.y) {
        return;
    }

    vec2 pixelCoord = float(surfelSize) * (surfelCoord + vec2(0.5, 0.5));
    vec2 uv = vec2(pixelCoord) / size;

    float depth = sampleBC4Buffer(uv);

    vec2 ndc = 2.0 * uv - 1.0;
    vec3 viewCoord = ndcToView(projectionInverse, ndc, depth);
    vec3 worldCoord = viewToWorld(viewInverseDepth, viewCoord);

    uint shaderIndex = uint(gl_GlobalInvocationID.y * uint(size.x) + gl_GlobalInvocationID.x);
    vertices[shaderIndex].position = worldCoord;
    vertices[shaderIndex].color = vec3(1.0, 1.0, 1.0);
    vertices[shaderIndex].texCoords = viewToScreen(projection, viewCoord);

    if (pixelCoord.x < size.x - float(surfelSize) && pixelCoord.y < size.y - float(surfelSize)) {
        /************************

                tl -- tr
                |    / |
                |   c  |
                |  /   |
                bl -- br

        ************************/
        uint bottomLeftIdx = shaderIndex;
        uint bottomRightIdx = shaderIndex + 1u;
        uint topLeftIdx = shaderIndex + uint(size.x);
        uint topRightIdx = shaderIndex + uint(size.x) + 1u;

        indices[shaderIndex * INDICES_IN_A_QUAD + 0u] = topLeftIdx;
        indices[shaderIndex * INDICES_IN_A_QUAD + 1u] = bottomLeftIdx;
        indices[shaderIndex * INDICES_IN_A_QUAD + 2u] = topRightIdx;

        indices[shaderIndex * INDICES_IN_A_QUAD + 3u] = topRightIdx;
        indices[shaderIndex * INDICES_IN_A_QUAD + 4u] = bottomLeftIdx;
        indices[shaderIndex * INDICES_IN_A_QUAD + 5u] = bottomRightIdx;
    }
}
