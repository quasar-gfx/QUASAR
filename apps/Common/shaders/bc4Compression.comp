layout(local_size_x = THREADS_PER_LOCALGROUP, local_size_y = THREADS_PER_LOCALGROUP, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D depthMap;

struct Block {
    float max;
    float min;
    uint data[6];
};

layout(std430, binding = 0) buffer BC4Buffer {
    Block bc4buffer[];
};

uniform vec2 depthMapSize;
uniform vec2 bc4DepthSize;

// Sample depth value from the depth map
float sampleDepth(sampler2D depthMap, ivec2 sampleCoord) {
    float depth = texelFetch(depthMap, sampleCoord, 0).r;
    return depth;
}

void main() {
    ivec2 blockPixelCoord = ivec2(gl_GlobalInvocationID.xy);
    if (blockPixelCoord.x >= bc4DepthSize.x || blockPixelCoord.y >= bc4DepthSize.y) {
        return;
    }

    float blockData[64];
    float minDepth = 1.0;
    float maxDepth = 0.0;

    // Sample 8x8 block and find min/max
    ivec2 startPixelCoord = 8 * blockPixelCoord;
    for (int y = 0; y < 8; y++) {
        for (int x = 0; x < 8; x++) {
            ivec2 sampleCoord = startPixelCoord + ivec2(x, y);
            if(all(lessThan(sampleCoord, ivec2(depthMapSize)))) {
                float depth = sampleDepth(depthMap, sampleCoord);
                blockData[y * 8 + x] = depth;
                minDepth = min(minDepth, depth);
                maxDepth = max(maxDepth, depth);
            }
        }
    }

    // Calculate interpolated values
    float interpVals[8];
    for (int i = 0; i < 8; i++) {
        interpVals[i] = mix(minDepth, maxDepth, float(i) / 7.0);
    }

    // Compress block data
    Block block;
    block.max = maxDepth;
    block.min = minDepth;

    uint bits[6] = uint[](0u, 0u, 0u, 0u, 0u, 0u);
    int bitIndex = 0;
    uint mask = 0;

    for (int i = 0; i < 64; i++) {
        float pixelValue = blockData[i];

        // Find closest interpolated value
        int bestIndex = 0;
        float minDiff = abs(pixelValue - interpVals[0]);
        for(int k = 1; k < 8; k++) {
            float diff = abs(pixelValue - interpVals[k]);
            if(diff < minDiff) {
                minDiff = diff;
                bestIndex = k;
            }
        }

        // Pack 3-bit index
        uint uintIndex = bitIndex / 32;
        uint bitOffset = bitIndex % 32;

        if (bitOffset <= 29) {
            // Normal case: all 3 bits fit in the current uint
            bits[uintIndex] |= uint(bestIndex) << (29 - bitOffset);
        }
        else {
            // Split case: the 3 bits are split across two uints
            uint bitsInCurrent = 32 - bitOffset;
            uint bitsInNext = 3 - bitsInCurrent;

            // Pack the bits that fit in the current uint
            bits[uintIndex] |= uint(bestIndex >> bitsInNext);

            // Pack the remaining bits in the next uint
            if(bitsInNext == 1) mask = 1; // 0b01
            if(bitsInNext == 2) mask = 3; //0b11
            bits[uintIndex + 1] |= uint(bestIndex & mask) << (32 - bitsInNext);
        }

        bitIndex += 3;
    }

    // Store packed data
    for (int i = 0; i < 6; i++) {
        block.data[i] = bits[i];
    }

    // Write compressed block to output buffer
    uint blockIndex = uint(blockPixelCoord.y) * uint(bc4DepthSize.x) + uint(blockPixelCoord.x);
    bc4buffer[blockIndex] = block;
}
