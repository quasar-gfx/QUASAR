#include "constants.glsl"
#include "camera_utils.glsl"

layout(local_size_x = THREADS_PER_LOCALGROUP, local_size_y = THREADS_PER_LOCALGROUP, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D depthMap;

struct Vertex {
    vec3 position;
    vec3 color;
    vec3 normal;
    vec2 texCoords;
    vec3 tangent;
    vec3 bitangent;
};

uniform vec2 depthMapSize;

uniform mat4 view;
uniform mat4 projection;
uniform mat4 viewInverse;
uniform mat4 projectionInverse;
uniform float near;
uniform float far;

uniform int surfelSize = 1;

layout(std430, binding = 0) buffer VertexBufferDepth {
    Vertex verticesDepth[];
};

layout(std430, binding = 1) buffer IndexBuffer {
    unsigned int indices[];
};

float sampleDepth(sampler2D depthMap, ivec2 sampleCoord) {
    float depth = texelFetch(depthMap, sampleCoord, 0).r;
    depth = clamp(depth, 0.0, MAX_DEPTH);
    return depth;
}

void main() {
    vec2 size = vec2(depthMapSize) / float(surfelSize);

    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    if (pixelCoord.x >= int(size.x) || pixelCoord.y >= int(size.y)) {
        return;
    }

    vec2 surfelCornerCoordBottomLeft = float(surfelSize) * vec2(gl_GlobalInvocationID.xy);
    vec2 pixelCenterCoord            = surfelCornerCoordBottomLeft + vec2(0.5, 0.5);
    vec2 uvCenter                    = pixelCenterCoord / vec2(depthMapSize);
    vec2 pixelCoordsNDC              = 2.0 * uvCenter - 1.0;
    float pixelDepth                 = sampleDepth(depthMap, ivec2(pixelCenterCoord));
    vec3 pixelCoordsViewCenter       = ndcToView(projectionInverse, pixelCoordsNDC, pixelDepth);

    // store depth
    unsigned int shaderIndex = unsigned int(gl_GlobalInvocationID.y * size.x + gl_GlobalInvocationID.x);
    verticesDepth[shaderIndex].position = viewToWorld(viewInverse, pixelCoordsViewCenter);
    verticesDepth[shaderIndex].color = vec3(1.0, 1.0, 1.0);
    verticesDepth[shaderIndex].texCoords = viewToScreen(projection, pixelCoordsViewCenter);

    if (pixelCoord.x < size.x - surfelSize && pixelCoord.y < size.y - surfelSize) {
        /************************

                tl -- tr
                |    / |
                |   c  |
                |  /   |
                bl -- br

        ************************/
        unsigned int bottomLeftIdx = shaderIndex;
        unsigned int bottomRightIdx = shaderIndex + 1;
        unsigned int topLeftIdx = shaderIndex + unsigned int(size.x);
        unsigned int topRightIdx = shaderIndex + unsigned int(size.x) + 1;

        indices[shaderIndex * 6 + 0] = topLeftIdx;
        indices[shaderIndex * 6 + 1] = bottomLeftIdx;
        indices[shaderIndex * 6 + 2] = topRightIdx;

        indices[shaderIndex * 6 + 3] = topRightIdx;
        indices[shaderIndex * 6 + 4] = bottomLeftIdx;
        indices[shaderIndex * 6 + 5] = bottomRightIdx;
    }
}
