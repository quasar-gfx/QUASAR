#include "quads_utils.glsl"

layout(local_size_x = THREADS_PER_LOCALGROUP, local_size_y = THREADS_PER_LOCALGROUP, local_size_z = 1) in;

layout(std430, binding = 0) buffer QuadBufferSizes {
    uint numProxies;
    uint numDepthOffsets;
};

layout(std430, binding = 1) readonly buffer NormalSphericalsBufferInput {
    uint normalSphericalsInput[];
};

layout(std430, binding = 2) readonly buffer DepthBufferInput {
    float depthsInput[];
};

layout(std430, binding = 3) readonly buffer OffsetsBufferInput {
    uint offsetSizeFlattenedsInput[];
};

layout(std430, binding = 4) writeonly buffer NormalSphericalsBufferOutput {
    uint normalSphericalsOutput[];
};

layout(std430, binding = 5) writeonly buffer DepthsBufferOutput {
    float depthsOutput[];
};

layout(std430, binding = 6) writeonly buffer OffsetsBufferOutput {
    uint offsetSizeFlattenedsOutput[];
};

uniform vec2 gBufferSize;
uniform vec2 quadMapSize;

QuadMapData loadInputQuadMap(ivec2 pixelCoord) {
    uint index = uint(pixelCoord.y) * uint(quadMapSize.x) + uint(pixelCoord.x);

    QuadMapDataPacked quadMapDataPacked;
    quadMapDataPacked.normalSpherical = normalSphericalsInput[index];
    quadMapDataPacked.depth = depthsInput[index];
    quadMapDataPacked.offsetSizeFlattened = offsetSizeFlattenedsInput[index];

    QuadMapData quadMapData;
    quadMapData.normal = unpackSphericalToNormal(quadMapDataPacked.normalSpherical);
    quadMapData.depth = quadMapDataPacked.depth;

    quadMapData.offset.x = (quadMapDataPacked.offsetSizeFlattened >> 20) & 0xFFFu;
    quadMapData.offset.y = (quadMapDataPacked.offsetSizeFlattened >> 8) & 0xFFFu;

    uint flattenedAndSize = quadMapDataPacked.offsetSizeFlattened & 0xFFu;
    quadMapData.size = (flattenedAndSize >> 1) & 0x7Fu;
    quadMapData.flattened = (flattenedAndSize & 1u) != 0;

    return quadMapData;
}

void storeOutputQuadMap(in uint index, in QuadMapData quadMapData) {
    QuadMapDataPacked quadMapDataPacked;
    quadMapDataPacked.normalSpherical = packNormalToSpherical(quadMapData.normal);
    quadMapDataPacked.depth = quadMapData.depth;

    uint flattenedAndSize = ((quadMapData.size & 0x7Fu) << 1) | (quadMapData.flattened ? 1u : 0u);
    quadMapDataPacked.offsetSizeFlattened = ((quadMapData.offset.x & 0xFFFu) << 20) |
                                                    ((quadMapData.offset.y & 0xFFFu) << 8) |
                                                        (flattenedAndSize & 0xFFu);
    normalSphericalsOutput[index] = quadMapDataPacked.normalSpherical;
    depthsOutput[index] = quadMapDataPacked.depth;
    offsetSizeFlattenedsOutput[index] = quadMapDataPacked.offsetSizeFlattened;
}

void main() {
    ivec2 quadMapPixelCoords = ivec2(gl_GlobalInvocationID.xy);
    if (quadMapPixelCoords.x >= int(quadMapSize.x) || quadMapPixelCoords.y >= int(quadMapSize.y)) {
        return;
    }

    QuadMapData quadMapData = loadInputQuadMap(quadMapPixelCoords);
    if (quadMapData.size == 0) {
        return;
    }

    uint size = 1 << quadMapData.size;
    bool flattened = quadMapData.flattened;
    if (!flattened) {
        // For (int i = 0; i < size; i++) {
        //     For (int j = 0; j < size; j++) {
        //         AtomicAdd(numDepthOffsets, 4);
        //     }
        // }
        atomicAdd(numDepthOffsets, size * size * 4);
    }

    uint index = atomicAdd(numProxies, 1);
    storeOutputQuadMap(index, quadMapData);
}
