layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D depthMap;

struct Vertex {
    uint id;
    vec3 position;
    vec3 color;
    vec3 normal;
    vec2 texCoords;
    vec3 tangent;
    vec3 bitangent;
};

layout(std430, binding = 0) buffer VertexBuffer {
    Vertex vertices[];
};

layout(std430, binding = 1) buffer IndexBuffer {
    uint indices[];
};

uniform vec2 screenSize;

uniform mat4 viewColor;
uniform mat4 viewInverseDepth;
uniform mat4 projection;
uniform mat4 projectionInverse;

uniform float near;
uniform float far;

uniform int surfelSize;

vec3 ndcToView(mat4 projectionInverse, vec2 ndc, float depth) {
    vec4 ndcPos;
    ndcPos.xy = ndc;
    ndcPos.z = 2.0 * depth - 1.0;
    ndcPos.w = 1.0;

    vec4 viewCoord = projectionInverse * ndcPos;
    viewCoord = viewCoord / viewCoord.w;
    return viewCoord.xyz;
}

vec3 viewToWorld(mat4 viewInverse, vec3 viewspaceCoord) {
    vec4 worldCoord = viewInverse * vec4(viewspaceCoord, 1.0);
    worldCoord = worldCoord / worldCoord.w;
    return worldCoord.xyz;
}

vec3 worldToView(mat4 view, vec3 worldCoord) {
    vec4 viewCoord = view * vec4(worldCoord, 1.0);
    viewCoord = viewCoord / viewCoord.w;
    return viewCoord.xyz;
}

vec2 viewToNDC(mat4 projection, vec3 viewCoord) {
    vec4 ndcCoord = projection * vec4(viewCoord, 1.0);
    ndcCoord = ndcCoord / ndcCoord.w;
    return ndcCoord.xy;
}

vec2 ndcToScreen(vec2 ndc) {
    return (ndc + 1.0) / 2.0;
}

vec2 worldToScreen(mat4 view, mat4 projection, vec3 worldCoord) {
    vec2 ndc = viewToNDC(projection, worldToView(view, worldCoord));
    return ndcToScreen(ndc);
}

float LinearizeDepth(float depth) {
    float z = depth * 2.0 - 1.0; // back to NDC
    return (2.0 * near * far) / (far + near - z * (far - near));
}

float UnLinearizeDepth(float depth) {
    depth *= far;
    depth = max(depth, near);
    float z = (depth * (far + near) - 2.0 * near * far) / (depth * (far - near));
    return (z + 1.0) / 2.0;
}

float sampleDepth(sampler2D depthMap, vec2 sampleCoord) {
    float depth = texture(depthMap, sampleCoord).r;
    depth = UnLinearizeDepth(depth);
    depth = clamp(depth, 0.0, 0.99999);
    return depth;
}

void main() {
    vec2 size = vec2(screenSize) / float(surfelSize);

    uint shaderIndex = uint(gl_GlobalInvocationID.y * size.x + gl_GlobalInvocationID.x);

    vec2 surfelCoord = vec2(gl_GlobalInvocationID.xy);

    vec2 pixelCoord = surfelSize * (surfelCoord + vec2(0.5, 0.5));
    vec2 pixelCoordNormalized = vec2(pixelCoord) / screenSize;

    float depth = sampleDepth(depthMap, pixelCoordNormalized);

    vec2 ndc = 2.0 * pixelCoordNormalized - 1.0;
    vec3 viewCoord = ndcToView(projectionInverse, ndc, depth);
    vec3 worldCoord = viewToWorld(viewInverseDepth, viewCoord);

    vertices[shaderIndex].position = worldCoord;
    vertices[shaderIndex].color = vec3(1.0, 1.0, 1.0);
    vertices[shaderIndex].texCoords = worldToScreen(viewColor, projection, worldCoord);

    if (pixelCoord.x < screenSize.x - surfelSize && pixelCoord.y < screenSize.y - surfelSize) {
        /************************

                ul -- ur
                |    / |
                |   c  |
                |  /   |
                ll -- lr

        ************************/
        uint lowerLeftIdx = shaderIndex;
        uint lowerRightIdx = shaderIndex + 1;
        uint upperLeftIdx = shaderIndex + uint(size.x);
        uint upperRightIdx = shaderIndex + uint(size.x) + 1;

        indices[shaderIndex * 6 + 0] = upperLeftIdx;
        indices[shaderIndex * 6 + 1] = upperRightIdx;
        indices[shaderIndex * 6 + 2] = lowerLeftIdx;

        indices[shaderIndex * 6 + 3] = upperRightIdx;
        indices[shaderIndex * 6 + 4] = lowerRightIdx;
        indices[shaderIndex * 6 + 5] = lowerLeftIdx;
    }
}
