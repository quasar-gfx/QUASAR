#version 430 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, rgba16f) readonly uniform image2D normalMap;
layout(binding = 1, rgba16f) readonly uniform image2D positionMap;
layout(binding = 2) uniform sampler2D depthMap;

layout(std430, binding = 0) buffer VertexBuffer {
    vec4 vertices[];
};

layout(std430, binding = 1) buffer IndexBuffer {
    uint indices[];
};

// layout(std430, binding = 2) buffer TexCoordBuffer {
//     vec2 texCoords[];
// };

uniform vec2 screenSize;

uniform mat4 viewInverse;
uniform mat4 projectionInverse;

uniform float near;
uniform float far;

uniform int surfelSize;

#define VERTICES_IN_A_QUAD 4

vec3 projectToWorld(vec2 ndc, float depth) {
    vec4 ndcPos;
    ndcPos.xy = ndc;
    ndcPos.z = 2.0 * depth - 1.0;
    ndcPos.w = 1.0;

    vec4 worldCoord = viewInverse * projectionInverse * ndcPos;
    worldCoord = worldCoord / worldCoord.w;

    return worldCoord.xyz;
}

void main() {
    vec2 size = vec2(screenSize) / float(surfelSize);

    uint shaderIndex = uint(gl_GlobalInvocationID.y * size.x + gl_GlobalInvocationID.x);

    ivec2 surfelCoords = ivec2(gl_GlobalInvocationID.xy);

    ivec2 pixelCoordsUpperLeft  = surfelSize * ivec2(surfelCoords);
    ivec2 pixelCoordsUpperRight = surfelSize * ivec2(surfelCoords.x + 1, surfelCoords.y);
    ivec2 pixelCoordsLowerLeft  = surfelSize * ivec2(surfelCoords.x, surfelCoords.y + 1);
    ivec2 pixelCoordsLowerRight = surfelSize * ivec2(surfelCoords.x + 1, surfelCoords.y + 1);

    vec2 pixelCoordsUpperLeftNormalized = pixelCoordsUpperLeft / screenSize;
    vec2 pixelCoordsUpperRightNormalized = pixelCoordsUpperRight / screenSize;
    vec2 pixelCoordsLowerLeftNormalized = pixelCoordsLowerLeft / screenSize;
    vec2 pixelCoordsLowerRightNormalized = pixelCoordsLowerRight / screenSize;

    vec2 ndcUpperLeft  = 2.0 * pixelCoordsUpperLeftNormalized - 1.0;
    vec2 ndcUpperRight = 2.0 * pixelCoordsUpperRightNormalized - 1.0;
    vec2 ndcLowerLeft  = 2.0 * pixelCoordsLowerLeftNormalized - 1.0;
    vec2 ndcLowerRight = 2.0 * pixelCoordsLowerRightNormalized - 1.0;

    vec4 positionDataUpperLeft  = imageLoad(positionMap, pixelCoordsUpperLeft);
    vec4 positionDataUpperRight = imageLoad(positionMap, pixelCoordsUpperRight);
    vec4 positionDataLowerLeft  = imageLoad(positionMap, pixelCoordsLowerLeft);
    vec4 positionDataLowerRight = imageLoad(positionMap, pixelCoordsLowerRight);

    vec4 normalDataUpperLeft  = imageLoad(normalMap, pixelCoordsUpperLeft);
    vec4 normalDataUpperRight = imageLoad(normalMap, pixelCoordsUpperRight);
    vec4 normalDataLowerLeft  = imageLoad(normalMap, pixelCoordsLowerLeft);
    vec4 normalDataLowerRight = imageLoad(normalMap, pixelCoordsLowerRight);

    vec4 depthDataUpperLeft  = texelFetch(depthMap, pixelCoordsUpperLeft, 0);
    vec4 depthDataUpperRight = texelFetch(depthMap, pixelCoordsUpperRight, 0);
    vec4 depthDataLowerLeft  = texelFetch(depthMap, pixelCoordsLowerLeft, 0);
    vec4 depthDataLowerRight = texelFetch(depthMap, pixelCoordsLowerRight, 0);

    vec3 positionUpperLeft  = positionDataUpperLeft.xyz;
    vec3 positionUpperRight = positionDataUpperRight.xyz;
    vec3 positionLowerLeft  = positionDataLowerLeft.xyz;
    vec3 positionLowerRight = positionDataLowerRight.xyz;

    vec3 normalUpperLeft  = normalize(normalDataUpperLeft.xyz);
    vec3 normalUpperRight = normalize(normalDataUpperRight.xyz);
    vec3 normalLowerLeft  = normalize(normalDataLowerLeft.xyz);
    vec3 normalLowerRight = normalize(normalDataLowerRight.xyz);

    float depthUpperLeft  = depthDataUpperLeft.r;
    float depthUpperRight = depthDataUpperRight.r;
    float depthLowerLeft  = depthDataLowerLeft.r;
    float depthLowerRight = depthDataLowerRight.r;

    float depth = depthUpperLeft;

    // give the same depth for now
    vec3 worldCoordUpperLeft  = projectToWorld(ndcUpperLeft, depth);
    vec3 worldCoordUpperRight = projectToWorld(ndcUpperRight, depth);
    vec3 worldCoordLowerLeft  = projectToWorld(ndcLowerLeft, depth);
    vec3 worldCoordLowerRight = projectToWorld(ndcLowerRight, depth);

    vec4 vertexCoordUpperLeft  = vec4(worldCoordUpperLeft, 1.0);
    vec4 vertexCoordUpperRight = vec4(worldCoordUpperRight, 1.0);
    vec4 vertexCoordLowerLeft  = vec4(worldCoordLowerLeft, 1.0);
    vec4 vertexCoordLowerRight = vec4(worldCoordLowerRight, 1.0);

    uint vertexIndexUpperLeft  = shaderIndex * VERTICES_IN_A_QUAD + 0;
    uint vertexIndexUpperRight = shaderIndex * VERTICES_IN_A_QUAD + 1;
    uint vertexIndexLowerLeft  = shaderIndex * VERTICES_IN_A_QUAD + 2;
    uint vertexIndexLowerRight = shaderIndex * VERTICES_IN_A_QUAD + 3;

    // uint vertexIndexUpperLeft  = shaderIndex;
    vertices[vertexIndexUpperLeft] = vertexCoordUpperLeft;
    vertices[vertexIndexUpperRight] = vertexCoordUpperRight;
    vertices[vertexIndexLowerLeft] = vertexCoordLowerLeft;
    vertices[vertexIndexLowerRight] = vertexCoordLowerRight;

    /************************

            ul -- ur
            |   / |
            | /   |
            ll -- lr

    ************************/
    indices[shaderIndex * 6 + 0] = vertexIndexUpperLeft;
    indices[shaderIndex * 6 + 1] = vertexIndexUpperRight;
    indices[shaderIndex * 6 + 2] = vertexIndexLowerLeft;

    indices[shaderIndex * 6 + 3] = vertexIndexUpperRight;
    indices[shaderIndex * 6 + 4] = vertexIndexLowerRight;
    indices[shaderIndex * 6 + 5] = vertexIndexLowerLeft;
}
