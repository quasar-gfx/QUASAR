#version 430 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, rgba16f) readonly uniform image2D normalMap;
layout(binding = 1, rgba16f) readonly uniform image2D positionMap;
layout(binding = 2) uniform sampler2D depthMap;

layout(std430, binding = 0) buffer VertexBuffer {
    vec4 vertices[];
};

layout(std430, binding = 1) buffer IndexBuffer {
    uint indices[];
};

// layout(std430, binding = 2) buffer TexCoordBuffer {
//     vec2 texCoords[];
// };

uniform vec2 screenSize;

uniform mat4 viewInverse;
uniform mat4 projectionInverse;

uniform float near;
uniform float far;

uniform int surfelSize;

void main() {
    vec2 size = vec2(screenSize) / float(surfelSize);

    uint vertexIndex = uint(gl_GlobalInvocationID.y * size.x + gl_GlobalInvocationID.x);

    ivec2 surfelCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 pixelCoords = surfelSize * surfelCoords;
    vec2 pixelCoordsNormalized = vec2(pixelCoords) / vec2(screenSize);
    vec2 ndc = pixelCoordsNormalized * 2.0 - 1.0;

    vec4 positionData = imageLoad(positionMap, pixelCoords);
    vec4 normalData = imageLoad(normalMap, pixelCoords);
    ivec2 pixelCoordsCenter = pixelCoords + surfelSize / 2;
    vec4 depthData = texelFetch(depthMap, pixelCoordsCenter, 0);

    vec3 normal = normalize(normalData.xyz);
    vec3 position = positionData.xyz;
    float depth = depthData.x;

    vec4 ndcPos;
    ndcPos.xy = ndc.xy;
    ndcPos.z = 2.0 * depth - 1.0;
    ndcPos.w = 1.0;

    vec4 worldCoords = viewInverse * projectionInverse * ndcPos;
    worldCoords = worldCoords / worldCoords.w;
    worldCoords.w = depth;

    vec3 vertexCoord = worldCoords.xyz;

    vertices[vertexIndex] = worldCoords;
    // texCoords[vertexIndex] = pixelCoordsNormalized;

    if (surfelCoords.x < size.x - 1 && surfelCoords.y < size.y) {
        uint currentVertexIndex = vertexIndex;
        uint nextVertexIndex = currentVertexIndex + 1;
        uint bottomVertexIndex = currentVertexIndex + uint(size.x);
        uint bottomNextVertexIndex = bottomVertexIndex + 1;

        /*****************************

                cvi --- nvi
                 |     /  |
                 |   /    |
                bvi --- bnvi

        *****************************/

        indices[vertexIndex * 6 + 0] = currentVertexIndex;
        indices[vertexIndex * 6 + 1] = nextVertexIndex;
        indices[vertexIndex * 6 + 2] = bottomVertexIndex;

        indices[vertexIndex * 6 + 3] = nextVertexIndex;
        indices[vertexIndex * 6 + 4] = bottomNextVertexIndex;
        indices[vertexIndex * 6 + 5] = bottomVertexIndex;
    }
}
