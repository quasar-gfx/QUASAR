layout(local_size_x = THREADS_PER_LOCALGROUP, local_size_y = 1, local_size_z = 1) in;

struct QuadMapData {
    vec3 normal;
    float depth;
    vec2 uv;
    uvec2 offset;
    unsigned int size;
    bool flattened;
};

struct QuadMapDataPacked {
    unsigned int normalSpherical;
    float depth;
    unsigned int offsetSizeFlattened;
};

layout(std430, binding = 0) readonly buffer CurrNumProxiesBuffer {
    unsigned int currNumProxies;
};

layout(std430, binding = 1) writeonly buffer PrevNumProxiesBuffer {
    unsigned int prevNumProxies;
};

layout(std430, binding = 2) writeonly buffer QuadCreatedFlagsBuffer {
    int quadCreatedFlags[];
};

layout(std430, binding = 3) readonly buffer NormalSphericalsBufferInput {
    unsigned int normalSphericalsInput[];
};

layout(std430, binding = 4) readonly buffer DepthBufferInput {
    float depthsInput[];
};

layout(std430, binding = 5) readonly buffer OffsetsBufferInput {
    unsigned int offsetSizeFlattenedsInput[];
};

layout(std430, binding = 6) writeonly buffer QuadIndicesBuffer {
    unsigned int quadIndices[];
};

uniform vec2 remoteWindowSize;

const float epsilon = 1e-5;
const float PI = 3.1415926535897932384626433832795;

void storeQuadIndex(ivec2 pixelCoords, unsigned int index) {
    unsigned int pixelIndex = unsigned int(pixelCoords.y) * unsigned int(remoteWindowSize.x) + unsigned int(pixelCoords.x);
    quadIndices[pixelIndex] = index;
}

vec3 unpackSphericalToNormalHalf(unsigned int packedNormal) {
    vec2 spherical01 = unpackHalf2x16(packedNormal);

    float theta = spherical01.x * (2.0 * PI) - PI;
    float phi = spherical01.y * PI;

    return vec3(
        sin(phi) * cos(theta),
        cos(phi),
        sin(phi) * sin(theta)
    );
}

QuadMapData loadQuadMap(unsigned int index) {
    QuadMapDataPacked quadMapDataPacked;
    quadMapDataPacked.normalSpherical = normalSphericalsInput[index];
    quadMapDataPacked.depth = depthsInput[index];
    quadMapDataPacked.offsetSizeFlattened = offsetSizeFlattenedsInput[index];

    QuadMapData quadMapData;
    quadMapData.normal = unpackSphericalToNormalHalf(quadMapDataPacked.normalSpherical);
    quadMapData.depth = quadMapDataPacked.depth;

    quadMapData.offset.x = (quadMapDataPacked.offsetSizeFlattened >> 20) & 0xFFFu;
    quadMapData.offset.y = (quadMapDataPacked.offsetSizeFlattened >> 8) & 0xFFFu;

    unsigned int flattenedAndSize = quadMapDataPacked.offsetSizeFlattened & 0xFFu;
    quadMapData.size = (flattenedAndSize >> 1) & 0x7Fu;
    quadMapData.flattened = (flattenedAndSize & 1u) != 0u;

    unsigned int halfSize = 1u << (quadMapData.size - 1u); // 2^size / 2
    quadMapData.uv = (vec2(quadMapData.offset) + float(halfSize) * vec2(0.5)) / remoteWindowSize;

    return quadMapData;
}

void main() {
    unsigned int proxyIndex = gl_GlobalInvocationID.x;

    if (proxyIndex == 0u) {
        prevNumProxies = currNumProxies;
    }

    // reset quadCreatedFlags
    quadCreatedFlags[proxyIndex] = 0;

    if (proxyIndex >= currNumProxies) {
        return;
    }

    // uncomment for debugging:
    // ivec2 pixelCoords = ivec2(proxyIndex % unsigned int(remoteWindowSize.x), proxyIndex / unsigned int(remoteWindowSize.x));
    // storeQuadIndex(pixelCoords, proxyIndex);

    QuadMapData quadMapData = loadQuadMap(proxyIndex);
    if (quadMapData.size == 0u) {
        return;
    }

    vec2 proxyPlaneUV = quadMapData.uv;
    ivec2 proxyPlanePixelCoord = ivec2(quadMapData.offset);

    unsigned int halfSize = 1u << (quadMapData.size - 1u); // 2^size / 2

    // put proxyIndex into quadIndices
    ivec2 baseCoord = proxyPlanePixelCoord;
    for (unsigned int idx = 0u; idx < halfSize * halfSize; idx++) {
        unsigned int i = idx % halfSize;
        unsigned int j = idx / halfSize;
        ivec2 pixelCoords = baseCoord + ivec2(i, j);
        storeQuadIndex(pixelCoords, proxyIndex);
    }
}
