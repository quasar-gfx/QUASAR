layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

precision highp sampler2D;
precision highp image2D;

struct QuadMapPlane {
    vec3 normal;
    float depth;
};

struct QuadMapData {
    vec3 normal;
    vec2 uv;
    float depth;
};

layout(std430, binding = 0) buffer InputQuadMapBuffer {
    QuadMapPlane inputQuadMap[];
};

layout(std430, binding = 1) buffer OutputQuadMapBuffer {
    QuadMapData outputQuadMap[];
};

layout(std430, binding = 2) buffer QuadMap2SizeBuffer {
    uint quadMap2Size;
};

struct Plane {
    vec3 normal;
    float constant;
};

uniform vec2 quadMapSize;

uniform mat4 view;
uniform mat4 projection;
uniform mat4 viewInverse;
uniform mat4 projectionInverse;

uniform float near;
uniform float far;

uniform float similarityThreshold;

#define MAX_DEPTH 0.9999

vec3 ndcToView(mat4 projectionInverse, vec2 ndc, float depth) {
    depth = clamp(depth, 0.0, MAX_DEPTH);

    vec4 ndcPos;
    ndcPos.xy = ndc;
    ndcPos.z = 2.0 * depth - 1.0;
    ndcPos.w = 1.0;

    vec4 viewCoord = projectionInverse * ndcPos;
    viewCoord = viewCoord / viewCoord.w;
    return viewCoord.xyz;
}

vec3 viewToWorld(mat4 viewInverse, vec3 viewCoord) {
    vec4 worldCoord = viewInverse * vec4(viewCoord, 1.0);
    worldCoord = worldCoord / worldCoord.w;
    return worldCoord.xyz;
}

vec3 worldToView(mat4 view, vec3 worldCoord) {
    vec4 viewCoord = view * vec4(worldCoord, 1.0);
    viewCoord = viewCoord / viewCoord.w;
    return viewCoord.xyz;
}

vec2 viewToNDC(mat4 projection, vec3 viewCoord) {
    vec4 ndcCoord = projection * vec4(viewCoord, 1.0);
    ndcCoord = ndcCoord / ndcCoord.w;
    return ndcCoord.xy;
}

vec2 ndcToScreen(vec2 ndc) {
    return (ndc + 1.0) / 2.0;
}

vec2 worldToScreen(mat4 view, mat4 projection, vec3 worldCoord) {
    vec2 ndc = viewToNDC(projection, worldToView(view, worldCoord));
    return ndcToScreen(ndc);
}

QuadMapPlane sampleQuadMap(vec2 texCoord) {
    uint index = uint(texCoord.y * quadMapSize.x + texCoord.x);
    QuadMapPlane quadMapPlane = inputQuadMap[index];
    return quadMapPlane;
}

float planeDistance(Plane plane1, Plane plane2) {
    return abs(plane1.normal.x - plane2.normal.x) +
           abs(plane1.normal.y - plane2.normal.y) +
           abs(plane1.normal.z - plane2.normal.z) +
           abs(plane1.constant - plane2.constant);
}

void main() {
    vec2 inputQuadMapSize = quadMapSize;

    vec2 pixelCoord = vec2(gl_GlobalInvocationID.xy);

    QuadMapPlane plane = sampleQuadMap(pixelCoord);
    vec2 uv = pixelCoord / inputQuadMapSize;

    uint outputIndex = atomicAdd(quadMap2Size, 1);
    outputQuadMap[outputIndex + 0] = QuadMapData(plane.normal, uv, plane.depth);
}
