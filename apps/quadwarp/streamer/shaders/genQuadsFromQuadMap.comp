layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

precision highp sampler2D;
precision highp image2D;

struct Vertex {
    uint id;
    vec3 position;
    vec3 color;
    vec3 normal;
    vec2 texCoords;
    vec3 tangent;
    vec3 bitangent;
};

struct QuadMapPlane {
    vec3 normal;
    float depth;
};

layout(std430, binding = 0) buffer QuadMapBuffer {
    QuadMapPlane quadMap[];
};

layout(std430, binding = 1) buffer VertexCounterBuffer {
    uint numVertices;
};

layout(std430, binding = 2) buffer IndexCounterBuffer {
    uint numIndices;
};

layout(std430, binding = 3) buffer VertexBuffer {
    Vertex vertices[];
};

layout(std430, binding = 4) buffer IndexBuffer {
    uint indices[];
};

layout(std430, binding = 5) buffer VertexBufferWireframe {
    Vertex verticesWireframe[];
};

layout(std430, binding = 6) buffer IndexBufferWireframe {
    uint indicesWireframe[];
};

struct Plane {
    vec3 normal;
    float constant;
};

struct Quad {
    vec3 bottomLeft;
    vec3 bottomRight;
    vec3 topLeft;
    vec3 topRight;
};

struct Quad1D {
    float bottomLeft;
    float bottomRight;
    float topLeft;
    float topRight;
};

struct Quad2D {
    vec2 bottomLeft;
    vec2 bottomRight;
    vec2 topLeft;
    vec2 topRight;
};

// a Quad subdivided into 4 smaller Quads
struct MultiQuad {
    vec3 bottomLeft;
    vec3 bottom;
    vec3 bottomRight;
    vec3 left;
    vec3 center;
    vec3 right;
    vec3 topLeft;
    vec3 top;
    vec3 topRight;
};

struct MultiQuad1D {
    float bottomLeft;
    float bottom;
    float bottomRight;
    float left;
    float center;
    float right;
    float topLeft;
    float top;
    float topRight;
};

struct MultiQuad2D {
    vec2 bottomLeft;
    vec2 bottom;
    vec2 bottomRight;
    vec2 left;
    vec2 center;
    vec2 right;
    vec2 topLeft;
    vec2 top;
    vec2 topRight;
};

uniform vec2 screenSize;

uniform mat4 view;
uniform mat4 projection;
uniform mat4 viewInverse;
uniform mat4 projectionInverse;

uniform float near;
uniform float far;

uniform float distanceThreshold;
uniform float angleThreshold;

uniform vec2 quadMapSize;

const float epilson = 1e-5;

const vec3 origin = vec3(0.0, 0.0, 0.0);
const vec3 forward = vec3(0.0, 0.0, -1.0);
const vec3 up = vec3(0.0, 1.0, 0.0);
const vec3 left = vec3(-1.0, 0.0, 0.0);
const vec3 right = vec3(1.0, 0.0, 0.0);

#define MAX_DEPTH 0.9999

#define VERTICES_IN_A_QUAD  4
#define INDICES_IN_A_QUAD   6
#define NUM_SUB_QUADS       4

#define BOTTOM_LEFT  0
#define BOTTOM       1
#define BOTTOM_RIGHT 2
#define LEFT         3
#define CENTER       4
#define RIGHT        5
#define TOP_LEFT     6
#define TOP          7
#define TOP_RIGHT    8

vec3 ndcToView(mat4 projectionInverse, vec2 ndc, float depth) {
    depth = clamp(depth, 0.0, MAX_DEPTH);

    vec4 ndcPos;
    ndcPos.xy = ndc;
    ndcPos.z = 2.0 * depth - 1.0;
    ndcPos.w = 1.0;

    vec4 viewCoord = projectionInverse * ndcPos;
    viewCoord = viewCoord / viewCoord.w;
    return viewCoord.xyz;
}

vec3 viewToWorld(mat4 viewInverse, vec3 viewCoord) {
    vec4 worldCoord = viewInverse * vec4(viewCoord, 1.0);
    worldCoord = worldCoord / worldCoord.w;
    return worldCoord.xyz;
}

vec3 worldToView(mat4 view, vec3 worldCoord) {
    vec4 viewCoord = view * vec4(worldCoord, 1.0);
    viewCoord = viewCoord / viewCoord.w;
    return viewCoord.xyz;
}

vec2 viewToNDC(mat4 projection, vec3 viewCoord) {
    vec4 ndcCoord = projection * vec4(viewCoord, 1.0);
    ndcCoord = ndcCoord / ndcCoord.w;
    return ndcCoord.xy;
}

vec2 ndcToScreen(vec2 ndc) {
    return (ndc + 1.0) / 2.0;
}

vec2 worldToScreen(mat4 view, mat4 projection, vec3 worldCoord) {
    vec2 ndc = viewToNDC(projection, worldToView(view, worldCoord));
    return ndcToScreen(ndc);
}

void sampleQuadMap(vec2 pixelCoord, out vec3 normal, out float depth) {
    uint index = uint(pixelCoord.y * quadMapSize.x + pixelCoord.x);
    QuadMapPlane value = quadMap[index];
    normal = value.normal;
    depth = value.depth;
}

float NormalizeDepth(float depth) {
    depth = clamp(depth, near, far);
    float z = (depth - near) / (far - near);
    return (1.0 - (1.0 / (1.0 + z * (far - near) / near)));
}

float signedDistanceToPlane(vec3 point, Plane plane) {
    return dot(plane.normal, point) + plane.constant;
}

bool planeIntersectsQuad(Plane plane, vec3 p[4]) {
    // get signed distance of each point to the plane
    float d0 = signedDistanceToPlane(p[0], plane);
    float d1 = signedDistanceToPlane(p[1], plane);
    float d2 = signedDistanceToPlane(p[2], plane);
    float d3 = signedDistanceToPlane(p[3], plane);

    // check if all points are on the same side of the plane
    bool posSide = (d0 > 0.0) || (d1 > 0.0) || (d2 > 0.0) || (d3 > 0.0);
    bool negSide = (d0 < 0.0) || (d1 < 0.0) || (d2 < 0.0) || (d3 < 0.0);
    return posSide && negSide;
}

bool planeIntersectsNearFar(vec3 planePointView, vec3 planeNormalView, vec3 nearPointsView[4], vec3 farPointsView[4]) {
    Plane plane = Plane(planeNormalView, -dot(planeNormalView, planePointView));

    // check if the plane intersects any of the four points of the near and far clipping planes
    bool intersectsNear = planeIntersectsQuad(plane, nearPointsView);
    bool intersectsFar  = planeIntersectsQuad(plane, farPointsView);

    return intersectsNear || intersectsFar;
}

vec3 constrainToMaxAngle(vec3 vectorNormalized, vec3 axisNormalized, float maxAngle) {
    float dotProduct = dot(vectorNormalized, axisNormalized);
    float angle = acos(dotProduct);
    if (angle > maxAngle) {
        vec3 rotationAxis = normalize(cross(vectorNormalized, axisNormalized));
        float cosMaxAngle = cos(maxAngle);
        float sinMaxAngle = sin(maxAngle);
        vec3 crossProduct = cross(rotationAxis, vectorNormalized);
        vectorNormalized = vectorNormalized * cosMaxAngle + \
                           cross(rotationAxis, vectorNormalized) * sinMaxAngle + \
                           rotationAxis * dot(rotationAxis, vectorNormalized) * (1.0 - cosMaxAngle);
    }

    return normalize(vectorNormalized);
}

vec3 planeRayIntersection(vec3 rayOrigin, vec3 rayDirection, vec3 planePoint, vec3 planeNormal) {
    float denominator = dot(rayDirection, planeNormal);
    if (abs(denominator) < epilson) {
        return vec3(1.0/0.0, 1.0/0.0, 1.0/0.0);
    }

    float t = dot(planePoint - rayOrigin, planeNormal) / denominator;
    if (t < 0.0) {
        return vec3(1.0/0.0, 1.0/0.0, 1.0/0.0);
    }

    vec3 intersection = rayOrigin + t * rayDirection;
    return intersection;
}

vec3 findQuadPointCorner(
    vec2 surfelNDC,
    vec3 surfelViewPlane,
    vec3 surfelViewPlanePixelNeighbor1,
    vec3 surfelViewPlanePixelNeighbor2,
    vec3 surfelViewPlanePixelNeighbor3,
    float pixelDepthCenter, float pixelDepthNeighbor1, float pixelDepthNeighbor2, float pixelDepthNeighbor3)
{
    if (surfelNDC.x <= -1.0 || surfelNDC.x >= 1.0 ||
        surfelNDC.y <= -1.0 || surfelNDC.y >= 1.0) {
        return surfelViewPlane;
    }

    // find distance of depth of point on this pixel's plane to the same point on neighboring pixels' planes
    float dist1 = NormalizeDepth(distance(surfelViewPlane, surfelViewPlanePixelNeighbor1));
    float dist2 = NormalizeDepth(distance(surfelViewPlane, surfelViewPlanePixelNeighbor2));
    float dist3 = NormalizeDepth(distance(surfelViewPlane, surfelViewPlanePixelNeighbor3));

    // add the contribution of each neighboring pixel to interpolated depth, if it is within distanceThreshold
    float depth = pixelDepthCenter;
    int n = 1;
    if (dist1 < distanceThreshold) {
        depth += pixelDepthNeighbor1; n++;
    }
    if (dist2 < distanceThreshold) {
        depth += pixelDepthNeighbor2; n++;
    }
    if (dist3 < distanceThreshold) {
        depth += pixelDepthNeighbor3; n++;
    }
    depth /= float(n);

    // only return the interpolated point if all neighboring pixels are within distanceThreshold
    vec3 surfelViewBottomLeftInterp = ndcToView(projectionInverse, surfelNDC, depth);
    if (n >= 3) {
        return surfelViewBottomLeftInterp;
    }
    return surfelViewPlane;
}

vec3 findQuadPointEdge(
    vec2 surfelNDC,
    vec3 surfelViewPlane,
    vec3 surfelViewPlanePixelNeighbor,
    float pixelDepthCenter, float pixelDepthNeighbor)
{
    if (surfelNDC.x <= -1.0 || surfelNDC.x >= 1.0 ||
        surfelNDC.y <= -1.0 || surfelNDC.y >= 1.0) {
        return surfelViewPlane;
    }

    // return interpolated point if neighboring pixel's depth is within distanceThreshold
    if (NormalizeDepth(distance(surfelViewPlane, surfelViewPlanePixelNeighbor)) < distanceThreshold) {
        float depth = (pixelDepthCenter + pixelDepthNeighbor) / 2.0;
        return ndcToView(projectionInverse, surfelNDC, depth);
    }
    return surfelViewPlane;
}

MultiQuad createSurfels(MultiQuad2D surfelNDCs, MultiQuad pixelCoordsView, MultiQuad pixelNormalsView, MultiQuad1D pixelDepths) {
    // project all points to the far plane
    MultiQuad surfelCoordsFarPlane;
    surfelCoordsFarPlane.bottomLeft  = ndcToView(projectionInverse, surfelNDCs.bottomLeft, 1.0);
    surfelCoordsFarPlane.bottom      = ndcToView(projectionInverse, surfelNDCs.bottom, 1.0);
    surfelCoordsFarPlane.bottomRight = ndcToView(projectionInverse, surfelNDCs.bottomRight, 1.0);
    surfelCoordsFarPlane.left        = ndcToView(projectionInverse, surfelNDCs.left, 1.0);
    surfelCoordsFarPlane.center      = ndcToView(projectionInverse, surfelNDCs.center, 1.0);
    surfelCoordsFarPlane.right       = ndcToView(projectionInverse, surfelNDCs.right, 1.0);
    surfelCoordsFarPlane.topLeft     = ndcToView(projectionInverse, surfelNDCs.topLeft, 1.0);
    surfelCoordsFarPlane.top         = ndcToView(projectionInverse, surfelNDCs.top, 1.0);
    surfelCoordsFarPlane.topRight    = ndcToView(projectionInverse, surfelNDCs.topRight, 1.0);

    // find all points on a ray going through each coordinate intersecting a plane defined by neighboring pixels
    vec3 rayDirection;

    rayDirection = normalize(surfelCoordsFarPlane.bottomLeft - origin);
    vec3 surfelViewBottomLeftPlane = planeRayIntersection(origin, rayDirection, pixelCoordsView.center, pixelNormalsView.center);
    vec3 surfelViewBottomLeftPlanePixelBottomLeft = planeRayIntersection(origin, rayDirection, pixelCoordsView.bottomLeft, pixelNormalsView.bottomLeft);
    vec3 surfelViewBottomLeftPlanePixelBottom = planeRayIntersection(origin, rayDirection, pixelCoordsView.bottom, pixelNormalsView.bottom);
    vec3 surfelViewBottomLeftPlanePixelLeft = planeRayIntersection(origin, rayDirection, pixelCoordsView.left, pixelNormalsView.left);

    rayDirection = normalize(surfelCoordsFarPlane.bottom - origin);
    vec3 surfelViewBottomPlane = planeRayIntersection(origin, rayDirection, pixelCoordsView.center, pixelNormalsView.center);
    vec3 surfelViewBottomPlanePixelBottom = planeRayIntersection(origin, rayDirection, pixelCoordsView.bottom, pixelNormalsView.bottom);

    rayDirection = normalize(surfelCoordsFarPlane.bottomRight - origin);
    vec3 surfelViewBottomRightPlane = planeRayIntersection(origin, rayDirection, pixelCoordsView.center, pixelNormalsView.center);
    vec3 surfelViewBottomRightPlanePixelBottomRight = planeRayIntersection(origin, rayDirection, pixelCoordsView.bottomRight, pixelNormalsView.bottomRight);
    vec3 surfelViewBottomRightPlanePixelBottom = planeRayIntersection(origin, rayDirection, pixelCoordsView.bottom, pixelNormalsView.bottom);
    vec3 surfelViewBottomRightPlanePixelRight = planeRayIntersection(origin, rayDirection, pixelCoordsView.right, pixelNormalsView.right);

    rayDirection = normalize(surfelCoordsFarPlane.left - origin);
    vec3 surfelViewLeftPlane = planeRayIntersection(origin, rayDirection, pixelCoordsView.center, pixelNormalsView.center);
    vec3 surfelViewLeftPlanePixelLeft = planeRayIntersection(origin, rayDirection, pixelCoordsView.left, pixelNormalsView.left);

    rayDirection = normalize(surfelCoordsFarPlane.right - origin);
    vec3 surfelViewRightPlane = planeRayIntersection(origin, rayDirection, pixelCoordsView.center, pixelNormalsView.center);
    vec3 surfelViewRightPlanePixelRight = planeRayIntersection(origin, rayDirection, pixelCoordsView.right, pixelNormalsView.right);

    rayDirection = normalize(surfelCoordsFarPlane.topLeft - origin);
    vec3 surfelViewTopLeftPlane = planeRayIntersection(origin, rayDirection, pixelCoordsView.center, pixelNormalsView.center);
    vec3 surfelViewTopLeftPlanePixelTopLeft = planeRayIntersection(origin, rayDirection, pixelCoordsView.topLeft, pixelNormalsView.topLeft);
    vec3 surfelViewTopLeftPlanePixelLeft = planeRayIntersection(origin, rayDirection, pixelCoordsView.left, pixelNormalsView.left);
    vec3 surfelViewTopLeftPlanePixelTop = planeRayIntersection(origin, rayDirection, pixelCoordsView.top, pixelNormalsView.top);

    rayDirection = normalize(surfelCoordsFarPlane.top - origin);
    vec3 surfelViewTopPlane = planeRayIntersection(origin, rayDirection, pixelCoordsView.center, pixelNormalsView.center);
    vec3 surfelViewTopPlanePixelTop = planeRayIntersection(origin, rayDirection, pixelCoordsView.top, pixelNormalsView.top);

    rayDirection = normalize(surfelCoordsFarPlane.topRight - origin);
    vec3 surfelViewTopRightPlane = planeRayIntersection(origin, rayDirection, pixelCoordsView.center, pixelNormalsView.center);
    vec3 surfelViewTopRightPlanePixelTopRight = planeRayIntersection(origin, rayDirection, pixelCoordsView.topRight, pixelNormalsView.topRight);
    vec3 surfelViewTopRightPlanePixelTop = planeRayIntersection(origin, rayDirection, pixelCoordsView.top, pixelNormalsView.top);
    vec3 surfelViewTopRightPlanePixelRight = planeRayIntersection(origin, rayDirection, pixelCoordsView.right, pixelNormalsView.right);

    /**********************************

      (ptl)  ----   (pt) ----  (ptr)
        |            |           |
        |  - stl -  st  -  str - |
        |            |           |
     (pl)  - sl - (pc/sc) - sr - (pr)
        |            |           |
        |  - sbl -  sb  -  sbr - |
        |            |           |
      (pbl)  ----   (pb) ----  (pbr)

    **********************************/

    // adjust points
    vec3 surfelViewBottomLeft = findQuadPointCorner(
        surfelNDCs.bottomLeft,
        surfelViewBottomLeftPlane,
        surfelViewBottomLeftPlanePixelBottomLeft, surfelViewBottomLeftPlanePixelBottom, surfelViewBottomLeftPlanePixelLeft,
        pixelDepths.center, pixelDepths.bottomLeft, pixelDepths.bottom, pixelDepths.left
    );

    vec3 surfelViewBottom = findQuadPointEdge(
        surfelNDCs.bottom,
        surfelViewBottomPlane,
        surfelViewBottomPlanePixelBottom,
        pixelDepths.center, pixelDepths.bottom
    );

    vec3 surfelViewBottomRight = findQuadPointCorner(
        surfelNDCs.bottomRight,
        surfelViewBottomRightPlane,
        surfelViewBottomRightPlanePixelBottomRight, surfelViewBottomRightPlanePixelBottom, surfelViewBottomRightPlanePixelRight,
        pixelDepths.center, pixelDepths.bottomRight, pixelDepths.bottom, pixelDepths.right
    );

    vec3 surfelViewLeft = findQuadPointEdge(
        surfelNDCs.left,
        surfelViewLeftPlane,
        surfelViewLeftPlanePixelLeft,
        pixelDepths.center, pixelDepths.left
    );

    vec3 surfelViewCenter = pixelCoordsView.center;

    vec3 surfelViewRight = findQuadPointEdge(
        surfelNDCs.right,
        surfelViewRightPlane,
        surfelViewRightPlanePixelRight,
        pixelDepths.center, pixelDepths.right
    );

    vec3 surfelViewTopLeft = findQuadPointCorner(
        surfelNDCs.topLeft,
        surfelViewTopLeftPlane,
        surfelViewTopLeftPlanePixelTopLeft, surfelViewTopLeftPlanePixelTop, surfelViewTopLeftPlanePixelLeft,
        pixelDepths.center, pixelDepths.topLeft, pixelDepths.top, pixelDepths.left
    );

    vec3 surfelViewTop = findQuadPointEdge(
        surfelNDCs.top,
        surfelViewTopPlane,
        surfelViewTopPlanePixelTop,
        pixelDepths.center, pixelDepths.top
    );

    vec3 surfelViewTopRight = findQuadPointCorner(
        surfelNDCs.topRight,
        surfelViewTopRightPlane,
        surfelViewTopRightPlanePixelTopRight, surfelViewTopRightPlanePixelTop, surfelViewTopRightPlanePixelRight,
        pixelDepths.center, pixelDepths.topRight, pixelDepths.top, pixelDepths.right
    );

    MultiQuad surfelView;
    surfelView.bottomLeft  = surfelViewBottomLeft;
    surfelView.bottom      = surfelViewBottom;
    surfelView.bottomRight = surfelViewBottomRight;
    surfelView.left        = surfelViewLeft;
    surfelView.center      = surfelViewCenter;
    surfelView.right       = surfelViewRight;
    surfelView.topLeft     = surfelViewTopLeft;
    surfelView.top         = surfelViewTop;
    surfelView.topRight    = surfelViewTopRight;

    return surfelView;
}

void storeQuad(Quad quad)
{
    /************************

            tl -- tr
            |   / |
            | /   |
            bl -- br

    ************************/

    uint vertexIdxBase = atomicAdd(numVertices, VERTICES_IN_A_QUAD);

    uint vertexIndexTopLeft = vertexIdxBase + 0;
    vertices[vertexIndexTopLeft].position = viewToWorld(viewInverse, quad.topLeft);
    vertices[vertexIndexTopLeft].color = vec3(1.0, 1.0, 1.0);
    vertices[vertexIndexTopLeft].texCoords = worldToScreen(view, projection, vertices[vertexIndexTopLeft].position);

    uint vertexIndexTopRight = vertexIdxBase + 1;
    vertices[vertexIndexTopRight].position = viewToWorld(viewInverse, quad.topRight);
    vertices[vertexIndexTopRight].color = vec3(1.0, 1.0, 1.0);
    vertices[vertexIndexTopRight].texCoords = worldToScreen(view, projection, vertices[vertexIndexTopRight].position);

    uint vertexIndexBottomLeft = vertexIdxBase + 2;
    vertices[vertexIndexBottomLeft].position = viewToWorld(viewInverse, quad.bottomLeft);
    vertices[vertexIndexBottomLeft].color = vec3(1.0, 1.0, 1.0);
    vertices[vertexIndexBottomLeft].texCoords = worldToScreen(view, projection, vertices[vertexIndexBottomLeft].position);

    uint vertexIndexBottomRight = vertexIdxBase + 3;
    vertices[vertexIndexBottomRight].position = viewToWorld(viewInverse, quad.bottomRight);
    vertices[vertexIndexBottomRight].color = vec3(1.0, 1.0, 1.0);
    vertices[vertexIndexBottomRight].texCoords = worldToScreen(view, projection, vertices[vertexIndexBottomRight].position);

    verticesWireframe[vertexIndexTopLeft] = vertices[vertexIndexTopLeft];
    verticesWireframe[vertexIndexTopRight] = vertices[vertexIndexTopRight];
    verticesWireframe[vertexIndexBottomLeft] = vertices[vertexIndexBottomLeft];
    verticesWireframe[vertexIndexBottomRight] = vertices[vertexIndexBottomRight];

    uint indexIdxBase = atomicAdd(numIndices, INDICES_IN_A_QUAD);

    indices[indexIdxBase + 0] = vertexIndexTopLeft;
    indices[indexIdxBase + 1] = vertexIndexBottomLeft;
    indices[indexIdxBase + 2] = vertexIndexTopRight;

    indices[indexIdxBase + 3] = vertexIndexTopRight;
    indices[indexIdxBase + 4] = vertexIndexBottomLeft;
    indices[indexIdxBase + 5] = vertexIndexBottomRight;

    indicesWireframe[indexIdxBase + 0] = indices[indexIdxBase + 0];
    indicesWireframe[indexIdxBase + 1] = indices[indexIdxBase + 1];
    indicesWireframe[indexIdxBase + 2] = indices[indexIdxBase + 2];
    indicesWireframe[indexIdxBase + 3] = indices[indexIdxBase + 3];
    indicesWireframe[indexIdxBase + 4] = indices[indexIdxBase + 4];
    indicesWireframe[indexIdxBase + 5] = indices[indexIdxBase + 5];
}

void main() {
    uint shaderIndex = uint(gl_GlobalInvocationID.y * screenSize.x + gl_GlobalInvocationID.x);

    /**********************************

      (ptl)  ----   (pt) ----  (ptr)
        |            |           |
        |  - stl -  st  -  str - |
        |            |           |
     (pl)  - sl - (pc/sc) - sr - (pr)
        |            |           |
        |  - sbl -  sb  -  sbr - |
        |            |           |
      (pbl)  ----   (pb) ----  (pbr)

    **********************************/

    // get coords
    vec2 surfelCoordBottomLeft  = vec2(gl_GlobalInvocationID.xy);

    MultiQuad2D pixelCoords;
    pixelCoords.bottomLeft  = surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(-1.0, -1.0);
    pixelCoords.bottom      = surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+0.0, -1.0);
    pixelCoords.bottomRight = surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+1.0, -1.0);
    pixelCoords.left        = surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(-1.0, +0.0);
    pixelCoords.center      = surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+0.0, +0.0);
    pixelCoords.right       = surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+1.0, +0.0);
    pixelCoords.topLeft     = surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(-1.0, +1.0);
    pixelCoords.top         = surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+0.0, +1.0);
    pixelCoords.topRight    = surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+1.0, +1.0);

    MultiQuad2D surfelCoords;
    surfelCoords.bottomLeft  = surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(0.0, 0.0);
    surfelCoords.bottom      = surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(0.5, 0.0);
    surfelCoords.bottomRight = surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(1.0, 0.0);
    surfelCoords.left        = surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(0.0, 0.5);
    surfelCoords.center      = pixelCoords.center;
    surfelCoords.right       = surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(1.0, 0.5);
    surfelCoords.topLeft     = surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(0.0, 1.0);
    surfelCoords.top         = surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(0.5, 1.0);
    surfelCoords.topRight    = surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(1.0, 1.0);

    // sample quad map
    MultiQuad1D pixelDepths;
    MultiQuad pixelNormalsView;

    sampleQuadMap(pixelCoords.bottomLeft, pixelNormalsView.bottomLeft, pixelDepths.bottomLeft);
    sampleQuadMap(pixelCoords.bottom, pixelNormalsView.bottom, pixelDepths.bottom);
    sampleQuadMap(pixelCoords.bottomRight, pixelNormalsView.bottomRight, pixelDepths.bottomRight);
    sampleQuadMap(pixelCoords.left, pixelNormalsView.left, pixelDepths.left);
    sampleQuadMap(pixelCoords.center, pixelNormalsView.center, pixelDepths.center);
    sampleQuadMap(pixelCoords.right, pixelNormalsView.right, pixelDepths.right);
    sampleQuadMap(pixelCoords.topLeft, pixelNormalsView.topLeft, pixelDepths.topLeft);
    sampleQuadMap(pixelCoords.top, pixelNormalsView.top, pixelDepths.top);
    sampleQuadMap(pixelCoords.topRight, pixelNormalsView.topRight, pixelDepths.topRight);

    // sample texture maps
    MultiQuad2D uvs;
    uvs.bottomLeft  = pixelCoords.bottomLeft  / screenSize;
    uvs.bottom      = pixelCoords.bottom      / screenSize;
    uvs.bottomRight = pixelCoords.bottomRight / screenSize;
    uvs.left        = pixelCoords.left        / screenSize;
    uvs.center      = pixelCoords.center      / screenSize;
    uvs.right       = pixelCoords.right       / screenSize;
    uvs.topLeft     = pixelCoords.topLeft     / screenSize;
    uvs.top         = pixelCoords.top         / screenSize;
    uvs.topRight    = pixelCoords.topRight    / screenSize;

    // if depth is too far, return
    if (pixelDepths.center == MAX_DEPTH) {
        return;
    }

    // project points to view space
    MultiQuad2D pixelNDCs;
    pixelNDCs.bottomLeft  = 2.0 * (pixelCoords.bottomLeft  / screenSize) - 1.0;
    pixelNDCs.bottom      = 2.0 * (pixelCoords.bottom      / screenSize) - 1.0;
    pixelNDCs.bottomRight = 2.0 * (pixelCoords.bottomRight / screenSize) - 1.0;
    pixelNDCs.left        = 2.0 * (pixelCoords.left        / screenSize) - 1.0;
    pixelNDCs.center      = 2.0 * (pixelCoords.center      / screenSize) - 1.0;
    pixelNDCs.right       = 2.0 * (pixelCoords.right       / screenSize) - 1.0;
    pixelNDCs.topLeft     = 2.0 * (pixelCoords.topLeft     / screenSize) - 1.0;
    pixelNDCs.top         = 2.0 * (pixelCoords.top         / screenSize) - 1.0;
    pixelNDCs.topRight    = 2.0 * (pixelCoords.topRight    / screenSize) - 1.0;

    MultiQuad2D surfelNDCs;
    surfelNDCs.bottomLeft  = 2.0 * (surfelCoords.bottomLeft  / screenSize) - 1.0;
    surfelNDCs.bottom      = 2.0 * (surfelCoords.bottom      / screenSize) - 1.0;
    surfelNDCs.bottomRight = 2.0 * (surfelCoords.bottomRight / screenSize) - 1.0;
    surfelNDCs.left        = 2.0 * (surfelCoords.left        / screenSize) - 1.0;
    surfelNDCs.center      = 2.0 * (surfelCoords.center      / screenSize) - 1.0;
    surfelNDCs.right       = 2.0 * (surfelCoords.right       / screenSize) - 1.0;
    surfelNDCs.topLeft     = 2.0 * (surfelCoords.topLeft     / screenSize) - 1.0;
    surfelNDCs.top         = 2.0 * (surfelCoords.top         / screenSize) - 1.0;
    surfelNDCs.topRight    = 2.0 * (surfelCoords.topRight    / screenSize) - 1.0;

    MultiQuad pixelCoordsView;
    pixelCoordsView.bottomLeft  = ndcToView(projectionInverse, pixelNDCs.bottomLeft, pixelDepths.bottomLeft);
    pixelCoordsView.bottom      = ndcToView(projectionInverse, pixelNDCs.bottom, pixelDepths.bottom);
    pixelCoordsView.bottomRight = ndcToView(projectionInverse, pixelNDCs.bottomRight, pixelDepths.bottomRight);
    pixelCoordsView.left        = ndcToView(projectionInverse, pixelNDCs.left, pixelDepths.left);
    pixelCoordsView.center      = ndcToView(projectionInverse, pixelNDCs.center, pixelDepths.center);
    pixelCoordsView.right       = ndcToView(projectionInverse, pixelNDCs.right, pixelDepths.right);
    pixelCoordsView.topLeft     = ndcToView(projectionInverse, pixelNDCs.topLeft, pixelDepths.topLeft);
    pixelCoordsView.top         = ndcToView(projectionInverse, pixelNDCs.top, pixelDepths.top);
    pixelCoordsView.topRight    = ndcToView(projectionInverse, pixelNDCs.topRight, pixelDepths.topRight);

    /**********************************

      (ptl)  ----   (pt) ----  (ptr)
        |            |           |
        |  - stl -  st  -  str - |
        |            |           |
     (pl)  - sl - (pc/sc) - sr - (pr)
        |            |           |
        |  - sbl -  sb  -  sbr - |
        |            |           |
      (pbl)  ----   (pb) ----  (pbr)

    **********************************/

    // create surfels
    MultiQuad surfelView = createSurfels(surfelNDCs, pixelCoordsView, pixelNormalsView, pixelDepths);

    /**********************

     (stl) - (st) - str
        |     |     |
      (sl) - (sc) - sr
        |     |     |
       sbl - sb - sbr

    **********************/
    Quad subQuadTopLeft;
    subQuadTopLeft.topLeft = surfelView.topLeft;
    subQuadTopLeft.topRight = surfelView.top;
    subQuadTopLeft.bottomLeft = surfelView.left;
    subQuadTopLeft.bottomRight = surfelView.center;
    storeQuad(subQuadTopLeft);

    /**********************

       stl - (st) - (str)
        |     |       |
        sl - (sc) - (sr)
        |     |       |
       sbl -  sb  -  sbr

    **********************/
    Quad subQuadTopRight;
    subQuadTopRight.topLeft = surfelView.top;
    subQuadTopRight.topRight = surfelView.topRight;
    subQuadTopRight.bottomLeft = surfelView.center;
    subQuadTopRight.bottomRight = surfelView.right;
    storeQuad(subQuadTopRight);
    /**********************

        stl -  st - str
        |      |     |
       (sl) - (sc) - sr
        |      |     |
      (sbl) - (sb) - sbr

    **********************/
    Quad subQuadBottomLeft;
    subQuadBottomLeft.topLeft = surfelView.left;
    subQuadBottomLeft.topRight = surfelView.center;
    subQuadBottomLeft.bottomLeft = surfelView.bottomLeft;
    subQuadBottomLeft.bottomRight = surfelView.bottom;
    storeQuad(subQuadBottomLeft);

    /**********************

        stl -  st - str
        |      |     |
        sl - (sc) - (sr)
        |      |     |
       sbl - (sb) - (sbr)

    **********************/
    Quad subQuadBottomRight;
    subQuadBottomRight.topLeft = surfelView.center;
    subQuadBottomRight.topRight = surfelView.right;
    subQuadBottomRight.bottomLeft = surfelView.bottom;
    subQuadBottomRight.bottomRight = surfelView.bottomRight;
    storeQuad(subQuadBottomRight);
}
