layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D positionMap;
layout(binding = 1) uniform sampler2D normalMap;
layout(binding = 2) uniform sampler2D idMap;
layout(binding = 3) uniform sampler2D depthMap;

struct Vertex {
    uint id;
    vec3 position;
    vec3 color;
    vec3 normal;
    vec2 texCoords;
    vec3 tangent;
    vec3 bitangent;
};

layout(std430, binding = 0) buffer VertexBuffer {
    Vertex vertices[];
};

layout(std430, binding = 1) buffer IndexBuffer {
    uint indices[];
};

uniform vec2 screenSize;

uniform mat4 viewInverse;
uniform mat4 projectionInverse;

uniform float near;
uniform float far;

uniform int surfelSize;

#define VERTICES_IN_A_QUAD 4
#define NUM_SUB_QUADS 4

vec3 ndcToView(vec2 ndc, float depth) {
    vec4 ndcPos;
    ndcPos.xy = ndc;
    ndcPos.z = 2.0 * depth - 1.0;
    ndcPos.w = 1.0;

    vec4 viewCoord = projectionInverse * ndcPos;
    viewCoord = viewCoord / viewCoord.w;
    return viewCoord.xyz;
}

vec3 viewToWorld(vec3 viewspaceCoord) {
    vec4 worldCoord = viewInverse * vec4(viewspaceCoord, 1.0);
    worldCoord = worldCoord / worldCoord.w;
    return worldCoord.xyz;
}

vec3 sampleNormal(sampler2D normalMap, vec2 sampleCoord) {
    return texture(normalMap, sampleCoord).xyz;
}

float sampleDepth(sampler2D depthMap, vec2 sampleCoord) {
    return texture(depthMap, sampleCoord).x;
}

vec3 planeRayIntersection(vec3 rayOrigin, vec3 rayDirection, vec3 planePoint, vec3 planeNormal) {
    float t = dot(planeNormal, planePoint - rayOrigin) / dot(planeNormal, rayDirection);
    return rayOrigin + t * rayDirection;
}

void createSubQuad(
        vec3 planePoint, vec3 planeNormal,
        vec2 ndcBottomLeft, vec2 ndcBottomRight, vec2 ndcTopLeft, vec2 ndcTopRight,
        float x, float y, vec2 size,
        uint shaderIndex, uint vertexOffset, uint indexOffset
    )
{
    /************************

            ul -- ur
            |   / |
            | /   |
            ll -- lr

    ************************/
    vec3 rayOrigin = vec3(0.0);

    vec3 rayDirectionBottomLeft = normalize(ndcToView(ndcBottomLeft, 1));
    vec3 viewCoordBottomLeft = planeRayIntersection(rayOrigin, rayDirectionBottomLeft, planePoint, planeNormal);

    vec3 rayDirectionBottomRight = normalize(ndcToView(ndcBottomRight, 1));
    vec3 viewCoordBottomRight = planeRayIntersection(rayOrigin, rayDirectionBottomRight, planePoint, planeNormal);

    vec3 rayDirectionTopLeft = normalize(ndcToView(ndcTopLeft, 1));
    vec3 viewCoordTopLeft = planeRayIntersection(rayOrigin, rayDirectionTopLeft, planePoint, planeNormal);

    vec3 rayDirectionTopRight = normalize(ndcToView(ndcTopRight, 1));
    vec3 viewCoordTopRight = planeRayIntersection(rayOrigin, rayDirectionTopRight, planePoint, planeNormal);

    uint vertexIndexTopLeft  = shaderIndex * NUM_SUB_QUADS * VERTICES_IN_A_QUAD + vertexOffset + 0;
    vertices[vertexIndexTopLeft] .position = viewToWorld(viewCoordTopLeft);
    vertices[vertexIndexTopLeft] .color = vec3(1.0, 1.0, 1.0);
    vertices[vertexIndexTopLeft] .texCoords = vec2(x / size.x, 1 - (y + 0.5) / size.y);

    uint vertexIndexTopRight = shaderIndex * NUM_SUB_QUADS * VERTICES_IN_A_QUAD + vertexOffset + 1;
    vertices[vertexIndexTopRight].position = viewToWorld(viewCoordTopRight);
    vertices[vertexIndexTopRight].color = vec3(1.0, 1.0, 1.0);
    vertices[vertexIndexTopRight].texCoords = vec2((x + 0.5) / size.x, 1 - (y + 0.5) / size.y);

    uint vertexIndexBottomLeft  = shaderIndex * NUM_SUB_QUADS * VERTICES_IN_A_QUAD + vertexOffset + 2;
    vertices[vertexIndexBottomLeft] .position = viewToWorld(viewCoordBottomLeft);
    vertices[vertexIndexBottomLeft] .color = vec3(1.0, 1.0, 1.0);
    vertices[vertexIndexBottomLeft] .texCoords = vec2(x / size.x, 1 - y / size.y);

    uint vertexIndexBottomRight = shaderIndex * NUM_SUB_QUADS * VERTICES_IN_A_QUAD + vertexOffset + 3;
    vertices[vertexIndexBottomRight].position = viewToWorld(viewCoordBottomRight);
    vertices[vertexIndexBottomRight].color = vec3(1.0, 1.0, 1.0);
    vertices[vertexIndexBottomRight].texCoords = vec2((x + 0.5) / size.x, 1 - y / size.y);

    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 0] = vertexIndexTopLeft;
    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 1] = vertexIndexTopRight;
    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 2] = vertexIndexBottomLeft;

    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 3] = vertexIndexTopRight;
    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 4] = vertexIndexBottomRight;
    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 5] = vertexIndexBottomLeft;
}


void main() {
    vec2 size = vec2(screenSize) / float(surfelSize);

    uint shaderIndex = uint(gl_GlobalInvocationID.y * size.x + gl_GlobalInvocationID.x);

    vec2 surfelCoords = vec2(gl_GlobalInvocationID.xy);

    uint x = shaderIndex % uint(size.x);
    uint y = shaderIndex / uint(size.x);

    /************************

            tl  - (tc) - tr
            |      |     |
           (lc) - (c) - (rc)
            |      |     |
       -->  bl  - (bc) - br

    ************************/

    vec2 pixelCoordBottomLeft   = surfelSize * (surfelCoords + vec2(0.5, 0.5) + vec2(0.0, 0.0));
    vec2 pixelCoordBottomCenter = surfelSize * (surfelCoords + vec2(0.5, 0.5) + vec2(0.5, 0.0));
    vec2 pixelCoordBottomRight  = surfelSize * (surfelCoords + vec2(0.5, 0.5) + vec2(1.0, 0.0));
    vec2 pixelCoordLeftCenter   = surfelSize * (surfelCoords + vec2(0.5, 0.5) + vec2(0.0, 0.5));
    vec2 pixelCoordCenter       = surfelSize * (surfelCoords + vec2(0.5, 0.5) + vec2(0.5, 0.5));
    vec2 pixelCoordRightCenter  = surfelSize * (surfelCoords + vec2(0.5, 0.5) + vec2(1.0, 0.5));
    vec2 pixelCoordTopCenter    = surfelSize * (surfelCoords + vec2(0.5, 0.5) + vec2(0.5, 1.0));
    vec2 pixelCoordTopLeft      = surfelSize * (surfelCoords + vec2(0.5, 0.5) + vec2(0.0, 1.0));
    vec2 pixelCoordTopRight     = surfelSize * (surfelCoords + vec2(0.5, 0.5) + vec2(1.0, 1.0));

    vec2 pixelCoordBottomLeftNormalized   = pixelCoordBottomLeft / screenSize;
    vec2 pixelCoordBottomCenterNormalized = pixelCoordBottomCenter / screenSize;
    vec2 pixelCoordBottomRightNormalized  = pixelCoordBottomRight / screenSize;
    vec2 pixelCoordLeftCenterNormalized   = pixelCoordLeftCenter / screenSize;
    vec2 pixelCoordCenterNormalized       = pixelCoordCenter / screenSize;
    vec2 pixelCoordRightCenterNormalized  = pixelCoordRightCenter / screenSize;
    vec2 pixelCoordTopCenterNormalized    = pixelCoordTopCenter / screenSize;
    vec2 pixelCoordTopLeftNormalized      = pixelCoordTopLeft / screenSize;
    vec2 pixelCoordTopRightNormalized     = pixelCoordTopRight / screenSize;

    vec2 ndcBottomLeft   = 2.0 * pixelCoordBottomLeftNormalized - 1.0;
    vec2 ndcBottomCenter = 2.0 * pixelCoordBottomCenterNormalized - 1.0;
    vec2 ndcBottomRight  = 2.0 * pixelCoordBottomRightNormalized - 1.0;
    vec2 ndcLeftCenter   = 2.0 * pixelCoordLeftCenterNormalized - 1.0;
    vec2 ndcCenter       = 2.0 * pixelCoordCenterNormalized - 1.0;
    vec2 ndcRightCenter  = 2.0 * pixelCoordRightCenterNormalized - 1.0;
    vec2 ndcTopCenter    = 2.0 * pixelCoordTopCenterNormalized - 1.0;
    vec2 ndcTopLeft      = 2.0 * pixelCoordTopLeftNormalized - 1.0;
    vec2 ndcTopRight     = 2.0 * pixelCoordTopRightNormalized - 1.0;

    vec3 normalBottomLeft  = sampleNormal(normalMap, pixelCoordBottomLeftNormalized);
    vec3 normalBottomRight = sampleNormal(normalMap, pixelCoordBottomRightNormalized);
    vec3 normalTopLeft     = sampleNormal(normalMap, pixelCoordTopLeftNormalized);
    vec3 normalTopRight    = sampleNormal(normalMap, pixelCoordTopRightNormalized);

    float depthBottomLeft  = sampleDepth(depthMap, pixelCoordBottomLeftNormalized);
    float depthBottomRight = sampleDepth(depthMap, pixelCoordBottomRightNormalized);
    float depthTopLeft     = sampleDepth(depthMap, pixelCoordTopLeftNormalized);
    float depthTopRight    = sampleDepth(depthMap, pixelCoordTopRightNormalized);

    vec3 viewCoordBottomLeft  = ndcToView(ndcBottomLeft, depthBottomLeft);
    vec3 viewCoordBottomRight = ndcToView(ndcBottomRight, depthBottomRight);
    vec3 viewCoordTopLeft     = ndcToView(ndcTopLeft, depthTopLeft);
    vec3 viewCoordTopRight    = ndcToView(ndcTopRight, depthTopRight);

    // void createSubQuad(
    //     vec3 planeNormal, vec3 planePoint,
    //     vec2 ndcBottomLeft, vec2 ndcBottomRight, vec2 ndcTopLeft, vec2 ndcTopRight,
    //     uint shaderIndex, uint vertexOffset, uint indexOffset
    // )

    /************************

            lc - c
            |  /  |
       -->  bl - bc

    ************************/
    createSubQuad(
        viewCoordBottomLeft, normalBottomLeft,
        ndcBottomLeft, ndcBottomCenter, ndcLeftCenter, ndcCenter,
        x, y, size,
        shaderIndex, 0, 0
    );

    /************************

       -->  tl - tc
            |     |
            lc - c

    ************************/
    createSubQuad(
        viewCoordTopLeft, normalTopLeft,
        ndcLeftCenter, ndcCenter, ndcTopLeft, ndcTopCenter,
        x, y + 0.5, size,
        shaderIndex, 4, 6
    );

    /************************

            tc - tr  <--
            |     |
            c  - rc

    ************************/
    createSubQuad(
        viewCoordTopRight, normalTopRight,
        ndcCenter, ndcRightCenter, ndcTopCenter, ndcTopRight,
        x + 0.5, y + 0.5, size,
        shaderIndex, 8, 12
    );

    /************************

            c  - rc
            |     |
            bc - br  <--

    ************************/
    createSubQuad(
        viewCoordBottomRight, normalBottomRight,
        ndcBottomCenter, ndcBottomRight, ndcCenter, ndcRightCenter,
        x + 0.5, y, size,
        shaderIndex, 12, 18
    );
}
