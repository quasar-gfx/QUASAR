layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

//layout(binding = 0) uniform sampler2D depthMap;

struct Vertex {
    uint id;
    vec3 position;
    vec3 color;
    vec3 normal;
    vec2 texCoords;
    vec3 tangent;
    vec3 bitangent;
};

struct Block{
    float max;
    float min;
    uint arr[6]; // 32
};

layout(std430, binding = 0) buffer VertexBuffer {
    Vertex vertices[];
};

layout(std430, binding = 1) buffer IndexBuffer {
    uint indices[];
};

layout(std430, binding = 2) buffer BC4Buffer {
    Block bc4buffer[];
};

uniform vec2 screenSize;

uniform mat4 view;
uniform mat4 projection;
uniform mat4 viewInverse;
uniform mat4 projectionInverse;

uniform float near;
uniform float far;

uniform int surfelSize;

vec3 ndcToView(mat4 projectionInverse, vec2 ndc, float depth) {
    vec4 ndcPos;
    ndcPos.xy = ndc;
    ndcPos.z = 2.0 * depth - 1.0;
    ndcPos.w = 1.0;

    vec4 viewCoord = projectionInverse * ndcPos;
    viewCoord = viewCoord / viewCoord.w;
    return viewCoord.xyz;
}

vec3 viewToWorld(mat4 viewInverse, vec3 viewCoord) {
    vec4 worldCoord = viewInverse * vec4(viewCoord, 1.0);
    worldCoord = worldCoord / worldCoord.w;
    return worldCoord.xyz;
}

vec3 worldToView(mat4 view, vec3 worldCoord) {
    vec4 viewCoord = view * vec4(worldCoord, 1.0);
    viewCoord = viewCoord / viewCoord.w;
    return viewCoord.xyz;
}

vec2 viewToNDC(mat4 projection, vec3 viewCoord) {
    vec4 ndcCoord = projection * vec4(viewCoord, 1.0);
    ndcCoord = ndcCoord / ndcCoord.w;
    return ndcCoord.xy;
}

vec2 ndcToScreen(vec2 ndc) {
    return (ndc + 1.0) / 2.0;
}

vec2 worldToScreen(mat4 view, mat4 projection, vec3 worldCoord) {
    vec2 ndc = viewToNDC(projection, worldToView(view, worldCoord));
    return ndcToScreen(ndc);
}

float LinearizeDepth(float depth) {
    float z = depth * 2.0 - 1.0; // back to NDC
    return (2.0 * near * far) / (far + near - z * (far - near));
}

float UnLinearizeDepth(float depth) {
    depth *= far;
    depth = max(depth, near);
    float z = (depth * (far + near) - 2.0 * near * far) / (depth * (far - near));
    return (z + 1.0) / 2.0;
}

float sampleBC4Buffer(vec2 pixelCoordNormalized) {
    ivec2 textureSize = ivec2(2048, 2048); // Adjust based on depth texture size
    ivec2 blockSize = ivec2(8, 8);
    ivec2 pixelCoord = ivec2(pixelCoordNormalized * vec2(textureSize)); // normalized coord to integer pixel coord 
    ivec2 blockCoord = pixelCoord / blockSize;
    ivec2 pixelInBlock = pixelCoord % blockSize;
    
    uint blockIndex = blockCoord.y * (textureSize.x / blockSize.x) + blockCoord.x; //index of this block in the BC4 buffer
    Block compressedBlock = bc4buffer[blockIndex];
    
    float maxVal = compressedBlock.max;
    float minVal = compressedBlock.min;
    
    uint pixelIndex = pixelInBlock.y * blockSize.x + pixelInBlock.x;
    uint bitIndex = pixelIndex * 3;
    uint arrayIndex = bitIndex / 32; // arr[6]
    bitIndex %= 32;
    
    uint index;
    if (bitIndex <= 29) {
        index = (compressedBlock.arr[arrayIndex] >> bitIndex) & 0x7u;
    } else {
        uint bits = compressedBlock.arr[arrayIndex] >> bitIndex;
        bits |= compressedBlock.arr[arrayIndex + 1] << (32 - bitIndex);
        index = bits & 0x7u;
    }
    
    float t = float(index) / 7.0;
    float depth = mix(minVal, maxVal, t);
    
    return depth;
}


void main() {
    vec2 size = vec2(screenSize) / float(surfelSize);

    uint shaderIndex = uint(gl_GlobalInvocationID.y * size.x + gl_GlobalInvocationID.x);

    vec2 surfelCoord = vec2(gl_GlobalInvocationID.xy);

    vec2 pixelCoord = surfelSize * (surfelCoord + vec2(0.5, 0.5));
    vec2 pixelCoordNormalized = vec2(pixelCoord) / screenSize;  

    float depth = sampleBC4Buffer(pixelCoordNormalized); // 

    vec2 ndc = 2.0 * pixelCoordNormalized - 1.0;
    vec3 viewCoord = ndcToView(projectionInverse, ndc, depth);
    vec3 worldCoord = viewToWorld(viewInverse, viewCoord);

    vertices[shaderIndex].position = worldCoord;
    vertices[shaderIndex].color = vec3(1.0, 1.0, 1.0);
    vertices[shaderIndex].texCoords = worldToScreen(view, projection, worldCoord);

    if (pixelCoord.x < screenSize.x - surfelSize && pixelCoord.y < screenSize.y - surfelSize) {
        /************************

                tl -- tr
                |    / |
                |   c  |
                |  /   |
                bl -- br

        ************************/
        uint bottomLeftIdx = shaderIndex;
        uint bottomRightIdx = shaderIndex + 1;
        uint topLeftIdx = shaderIndex + uint(size.x);
        uint topRightIdx = shaderIndex + uint(size.x) + 1;

        indices[shaderIndex * 6 + 0] = topLeftIdx;
        indices[shaderIndex * 6 + 1] = bottomLeftIdx;
        indices[shaderIndex * 6 + 2] = topRightIdx;

        indices[shaderIndex * 6 + 3] = topRightIdx;
        indices[shaderIndex * 6 + 4] = bottomLeftIdx;
        indices[shaderIndex * 6 + 5] = bottomRightIdx;
    }
}
