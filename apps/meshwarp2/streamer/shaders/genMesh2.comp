layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D positionMap;
layout(binding = 1) uniform sampler2D normalMap;
layout(binding = 2) uniform sampler2D idMap;
layout(binding = 3) uniform sampler2D depthMap;

struct Vertex {
    uint id;
    vec3 position;
    vec3 color;
    vec3 normal;
    vec2 texCoords;
    vec3 tangent;
    vec3 bitangent;
};

layout(std430, binding = 0) buffer VertexBuffer {
    Vertex vertices[];
};

layout(std430, binding = 1) buffer IndexBuffer {
    uint indices[];
};

layout(std430, binding = 2) buffer VertexBufferDepth {
    Vertex verticesDepth[];
};

uniform vec2 screenSize;

uniform mat4 view;
uniform mat4 projection;
uniform mat4 viewInverse;
uniform mat4 projectionInverse;

uniform float near;
uniform float far;

uniform int surfelSize;

uniform float threshold;

const float epilson = 1e-5;

const vec3 forward = vec3(0.0, 0.0, -1.0);

#define MAX_DEPTH 0.99999

#define VERTICES_IN_A_QUAD  4
#define INDICES_IN_A_QUAD   6
#define NUM_SUB_QUADS       4

vec3 ndcToView(mat4 projectionInverse, vec2 ndc, float depth) {
    depth = clamp(depth, 0.0, MAX_DEPTH);

    vec4 ndcPos;
    ndcPos.xy = ndc;
    ndcPos.z = 2.0 * depth - 1.0;
    ndcPos.w = 1.0;

    vec4 viewCoord = projectionInverse * ndcPos;
    viewCoord = viewCoord / viewCoord.w;
    return viewCoord.xyz;
}

vec3 viewToWorld(mat4 viewInverse, vec3 viewCoord) {
    vec4 worldCoord = viewInverse * vec4(viewCoord, 1.0);
    worldCoord = worldCoord / worldCoord.w;
    return worldCoord.xyz;
}

vec3 worldToView(mat4 view, vec3 worldCoord) {
    vec4 viewCoord = view * vec4(worldCoord, 1.0);
    viewCoord = viewCoord / viewCoord.w;
    return viewCoord.xyz;
}

vec2 viewToNDC(mat4 projection, vec3 viewCoord) {
    vec4 ndcCoord = projection * vec4(viewCoord, 1.0);
    ndcCoord = ndcCoord / ndcCoord.w;
    return ndcCoord.xy;
}

vec2 ndcToScreen(vec2 ndc) {
    return (ndc + 1.0) / 2.0;
}

vec2 worldToScreen(mat4 view, mat4 projection, vec3 worldCoord) {
    vec2 ndc = viewToNDC(projection, worldToView(view, worldCoord));
    return ndcToScreen(ndc);
}

vec3 sampleNormal(sampler2D normalMap, vec2 sampleCoord) {
    return normalize(texture(normalMap, sampleCoord).xyz);
}

float sampleDepth(sampler2D depthMap, vec2 sampleCoord) {
    float depth = texture(depthMap, sampleCoord).x;
    depth = clamp(depth, 0.0, MAX_DEPTH);
    return depth;
}

vec3 normalToView(mat4 view, vec3 normalWorld) {
    // extract the rotation part of the view matrix
    mat3 rotationMatrix = mat3(view);
    vec3 normalView = normalize(rotationMatrix * normalWorld);
    return normalView;
}

bool planeIntersectsFrustum(mat4 view, mat4 projection, vec3 planePointView, vec3 planeNormalView) {
    mat4 viewProjectionMatrix = projection * view;

    // extract frustum planes
    vec4 leftPlane   = viewProjectionMatrix[3] + viewProjectionMatrix[0];
    vec4 rightPlane  = viewProjectionMatrix[3] - viewProjectionMatrix[0];
    vec4 bottomPlane = viewProjectionMatrix[3] + viewProjectionMatrix[1];
    vec4 topPlane    = viewProjectionMatrix[3] - viewProjectionMatrix[1];
    vec4 nearPlane   = viewProjectionMatrix[3] + viewProjectionMatrix[2];
    vec4 farPlane    = viewProjectionMatrix[3] - viewProjectionMatrix[2];

    // normalize the planes
    leftPlane   /= length(leftPlane.xyz);
    rightPlane  /= length(rightPlane.xyz);
    bottomPlane /= length(bottomPlane.xyz);
    topPlane    /= length(topPlane.xyz);
    nearPlane   /= length(nearPlane.xyz);
    farPlane    /= length(farPlane.xyz);

    // check the intersection of the plane with each frustum plane
    bool intersectsLeft   = dot(vec4(planePointView.xyz, 1.0), leftPlane  ) <= 0.0;
    bool intersectsRight  = dot(vec4(planePointView.xyz, 1.0), rightPlane ) <= 0.0;
    bool intersectsBottom = dot(vec4(planePointView.xyz, 1.0), bottomPlane) <= 0.0;
    bool intersectsTop    = dot(vec4(planePointView.xyz, 1.0), topPlane   ) <= 0.0;

    return intersectsLeft || intersectsRight || intersectsBottom || intersectsTop;
}

vec3 adjustNormal(vec3 normalView, vec3 planePointView) {
    vec3 resultNormal;

    // if normal is facing away from camera, flip it
    if (dot(normalView, forward) < epilson) {
        normalView = -normalView;
    }

    // if normal intersects frustum, set it to vector facing the camera for now
    if (planeIntersectsFrustum(view, projection, planePointView, normalView)) {
        resultNormal = -forward;
    }
    else {
        resultNormal = normalView;
    }
    return resultNormal;
}

float LinearizeDepth(float depth) {
    float z = depth * 2.0 - 1.0; // back to NDC
    return (2.0 * near * far) / (far + near - z * (far - near));
}

float NormalizeDepth(float depth) {
    depth = clamp(depth, near, far);
    float z = (depth - near) / (far - near);
    return (1.0 - (1.0 / (1.0 + z * (far - near) / near)));
}

vec3 planeRayIntersection(vec3 rayOrigin, vec3 rayDirection, vec3 planePoint, vec3 planeNormal) {
    float denominator = dot(rayDirection, planeNormal);
    if (abs(denominator) < epilson) {
        return vec3(1.0/0.0, 1.0/0.0, 1.0/0.0);
    }

    float t = dot(planePoint - rayOrigin, planeNormal) / denominator;
    if (t < 0.0) {
        return vec3(1.0/0.0, 1.0/0.0, 1.0/0.0);
    }

    vec3 intersection = rayOrigin + t * rayDirection;
    return intersection;
}

vec3 findQuadPointCorner(
    vec2 surfelNDC,
    vec3 surfelViewPlane,
    vec3 surfelViewPlanePixelNeighbor1,
    vec3 surfelViewPlanePixelNeighbor2,
    vec3 surfelViewPlanePixelNeighbor3,
    float pixelDepthCenter, float pixelDepthNeighbor1, float pixelDepthNeighbor2, float pixelDepthNeighbor3
) {
    vec3 resultCoord;

    // find distance of depth of point on this pixel's plane to the same point on neighboring pixels' planes
    float dist1 = NormalizeDepth(distance(surfelViewPlane.z, surfelViewPlanePixelNeighbor1.z));
    float dist2 = NormalizeDepth(distance(surfelViewPlane.z, surfelViewPlanePixelNeighbor2.z));
    float dist3 = NormalizeDepth(distance(surfelViewPlane.z, surfelViewPlanePixelNeighbor3.z));

    // add the contribution of each neighboring pixel to interpolated depth, if it is within the threshold
    float depth = pixelDepthCenter;
    int n = 1;
    if (dist1 <= threshold) {
        depth += pixelDepthNeighbor1; n++;
    }
    if (dist2 <= threshold) {
        depth += pixelDepthNeighbor2; n++;
    }
    if (dist3 <= threshold) {
        depth += pixelDepthNeighbor3; n++;
    }
    depth /= float(n);

    // only return the interpolated point if all neighboring pixels' depths are within the threshold
    vec3 surfelViewBottomLeftInterp = ndcToView(projectionInverse, surfelNDC, depth);
    if (n >= 3) {
        resultCoord = surfelViewBottomLeftInterp;
    }
    else {
        resultCoord = surfelViewPlane;
    }
    return resultCoord;
}

vec3 findQuadPointEdge(
    vec2 surfelNDC,
    vec3 surfelViewPlane,
    vec3 surfelViewPlanePixelNeighbor,
    float pixelDepthCenter, float pixelDepthNeighbor
) {
    vec3 resultCoord;

    // return interpolated point if neighboring pixel's depth is within the threshold
    if (NormalizeDepth(distance(surfelViewPlane.z, surfelViewPlanePixelNeighbor.z)) <= threshold) {
        float depth = (pixelDepthCenter + pixelDepthNeighbor) / 2.0;
        resultCoord = ndcToView(projectionInverse, surfelNDC, depth);
    }
    else {
        resultCoord = surfelViewPlane;
    }
    return resultCoord;
}

void createSubQuad(
        vec3 viewCoordTopLeft, vec3 viewCoordTopRight, vec3 viewCoordBottomLeft, vec3 viewCoordBottomRight,
        float x, float y, vec2 size,
        uint shaderIndex, uint vertexOffset, uint indexOffset)
{
    /************************

            tl -- tr
            |   / |
            | /   |
            bl -- br

    ************************/

    uint vertexIndexTopLeft = shaderIndex * NUM_SUB_QUADS * VERTICES_IN_A_QUAD + vertexOffset + 0;
    vertices[vertexIndexTopLeft].position = viewToWorld(viewInverse, viewCoordTopLeft);
    vertices[vertexIndexTopLeft].color = vec3(1.0, 1.0, 1.0);
    vertices[vertexIndexTopLeft].texCoords = worldToScreen(view, projection, viewToWorld(viewInverse, viewCoordTopLeft));

    uint vertexIndexTopRight = shaderIndex * NUM_SUB_QUADS * VERTICES_IN_A_QUAD + vertexOffset + 1;
    vertices[vertexIndexTopRight].position = viewToWorld(viewInverse, viewCoordTopRight);
    vertices[vertexIndexTopRight].color = vec3(1.0, 1.0, 1.0);
    vertices[vertexIndexTopRight].texCoords = worldToScreen(view, projection, viewToWorld(viewInverse, viewCoordTopRight));

    uint vertexIndexBottomLeft = shaderIndex * NUM_SUB_QUADS * VERTICES_IN_A_QUAD + vertexOffset + 2;
    vertices[vertexIndexBottomLeft].position = viewToWorld(viewInverse, viewCoordBottomLeft);
    vertices[vertexIndexBottomLeft].color = vec3(1.0, 1.0, 1.0);
    vertices[vertexIndexBottomLeft].texCoords = worldToScreen(view, projection, viewToWorld(viewInverse, viewCoordBottomLeft));

    uint vertexIndexBottomRight = shaderIndex * NUM_SUB_QUADS * VERTICES_IN_A_QUAD + vertexOffset + 3;
    vertices[vertexIndexBottomRight].position = viewToWorld(viewInverse, viewCoordBottomRight);
    vertices[vertexIndexBottomRight].color = vec3(1.0, 1.0, 1.0);
    vertices[vertexIndexBottomRight].texCoords = worldToScreen(view, projection, viewToWorld(viewInverse, viewCoordBottomRight));

    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 0] = vertexIndexTopLeft;
    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 1] = vertexIndexTopRight;
    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 2] = vertexIndexBottomLeft;

    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 3] = vertexIndexTopRight;
    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 4] = vertexIndexBottomRight;
    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 5] = vertexIndexBottomLeft;
}

void main() {
    vec2 size = vec2(screenSize) / float(surfelSize);

    uint shaderIndex = uint(gl_GlobalInvocationID.y * size.x + gl_GlobalInvocationID.x);

    /**********************************

      (ptl)  ----   (pt) ----  (ptr)
        |            |           |
        |  - stl -  st  -  str - |
        |            |           |
     (pl)  - sl - (pc/sc) - sr - (pr)
        |            |           |
        |  - sbl -  sb  -  sbr - |
        |            |           |
      (pbl)  ----   (pb) ----  (pbr)

    **********************************/

    // get coords
    vec2 surfelCoordBottomLeft  = vec2(gl_GlobalInvocationID.xy);

    vec2 pixelCoordBottomLeft  = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(-1.0, -1.0));
    vec2 pixelCoordBottom      = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+0.0, -1.0));
    vec2 pixelCoordBottomRight = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+1.0, -1.0));
    vec2 pixelCoordLeft        = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(-1.0, +0.0));
    vec2 pixelCoordCenter      = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+0.0, +0.0));
    vec2 pixelCoordRight       = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+1.0, +0.0));
    vec2 pixelCoordTopLeft     = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(-1.0, +1.0));
    vec2 pixelCoordTop         = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+0.0, +1.0));
    vec2 pixelCoordTopRight    = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+1.0, +1.0));

    vec2 surfelCoordBottom      = surfelSize * (surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(0.5, 0.0));
    vec2 surfelCoordBottomRight = surfelSize * (surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(1.0, 0.0));
    vec2 surfelCoordLeft        = surfelSize * (surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(0.0, 0.5));
    vec2 surfelCoordCenter      = pixelCoordCenter;
    vec2 surfelCoordRight       = surfelSize * (surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(1.0, 0.5));
    vec2 surfelCoordTopLeft     = surfelSize * (surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(0.0, 1.0));
    vec2 surfelCoordTop         = surfelSize * (surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(0.5, 1.0));
    vec2 surfelCoordTopRight    = surfelSize * (surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(1.0, 1.0));

    // sample texture maps
    vec2 uvBottomLeft  = pixelCoordBottomLeft  / screenSize;
    vec2 uvBottom      = pixelCoordBottom      / screenSize;
    vec2 uvBottomRight = pixelCoordBottomRight / screenSize;
    vec2 uvLeft        = pixelCoordLeft        / screenSize;
    vec2 uvCenter      = pixelCoordCenter      / screenSize;
    vec2 uvRight       = pixelCoordRight       / screenSize;
    vec2 uvTopLeft     = pixelCoordTopLeft     / screenSize;
    vec2 uvTop         = pixelCoordTop         / screenSize;
    vec2 uvTopRight    = pixelCoordTopRight    / screenSize;

    float pixelDepthBottomLeft  = sampleDepth(depthMap, uvBottomLeft);
    float pixelDepthBottom      = sampleDepth(depthMap, uvBottom);
    float pixelDepthBottomRight = sampleDepth(depthMap, uvBottomRight);
    float pixelDepthLeft        = sampleDepth(depthMap, uvLeft);
    float pixelDepthCenter      = sampleDepth(depthMap, uvCenter);
    float pixelDepthRight       = sampleDepth(depthMap, uvRight);
    float pixelDepthTopLeft     = sampleDepth(depthMap, uvTopLeft);
    float pixelDepthTop         = sampleDepth(depthMap, uvTop);
    float pixelDepthTopRight    = sampleDepth(depthMap, uvTopRight);

    // project points to view space
    vec2 pixelNDCBottomLeft  = 2.0 * uvBottomLeft - 1.0;
    vec2 pixelNDCBottom      = 2.0 * uvBottom - 1.0;
    vec2 pixelNDCBottomRight = 2.0 * uvBottomRight - 1.0;
    vec2 pixelNDCLeft        = 2.0 * uvLeft - 1.0;
    vec2 pixelNDCCenter      = 2.0 * uvCenter - 1.0;
    vec2 pixelNDCRight       = 2.0 * uvRight - 1.0;
    vec2 pixelNDCTopLeft     = 2.0 * uvTopLeft - 1.0;
    vec2 pixelNDCTop         = 2.0 * uvTop - 1.0;
    vec2 pixelNDCTopRight    = 2.0 * uvTopRight - 1.0;

    vec2 surfelNDCBottomLeft  = 2.0 * (surfelCoordBottomLeft / screenSize) - 1.0;
    vec2 surfelNDCBottom      = 2.0 * (surfelCoordBottom / screenSize) - 1.0;
    vec2 surfelNDCBottomRight = 2.0 * (surfelCoordBottomRight / screenSize) - 1.0;
    vec2 surfelNDCLeft        = 2.0 * (surfelCoordLeft / screenSize) - 1.0;
    vec2 surfelNDCCenter      = 2.0 * (surfelCoordCenter / screenSize) - 1.0;
    vec2 surfelNDCRight       = 2.0 * (surfelCoordRight / screenSize) - 1.0;
    vec2 surfelNDCTopLeft     = 2.0 * (surfelCoordTopLeft / screenSize) - 1.0;
    vec2 surfelNDCTop         = 2.0 * (surfelCoordTop / screenSize) - 1.0;
    vec2 surfelNDCTopRight    = 2.0 * (surfelCoordTopRight / screenSize) - 1.0;

    vec3 pixelViewBottomLeft  = ndcToView(projectionInverse, pixelNDCBottomLeft, pixelDepthBottomLeft);
    vec3 pixelViewBottom      = ndcToView(projectionInverse, pixelNDCBottom, pixelDepthBottom);
    vec3 pixelViewBottomRight = ndcToView(projectionInverse, pixelNDCBottomRight, pixelDepthBottomRight);
    vec3 pixelViewLeft        = ndcToView(projectionInverse, pixelNDCLeft, pixelDepthLeft);
    vec3 pixelViewCenter      = ndcToView(projectionInverse, pixelNDCCenter, pixelDepthCenter);
    vec3 pixelViewRight       = ndcToView(projectionInverse, pixelNDCRight, pixelDepthRight);
    vec3 pixelViewTopLeft     = ndcToView(projectionInverse, pixelNDCTopLeft, pixelDepthTopLeft);
    vec3 pixelViewTop         = ndcToView(projectionInverse, pixelNDCTop, pixelDepthTop);
    vec3 pixelViewTopRight    = ndcToView(projectionInverse, pixelNDCTopRight, pixelDepthTopRight);

    vec3 surfelViewCenter = pixelViewCenter;

    /**********************************

      (ptl)  ----   (pt) ----  (ptr)
        |            |           |
        |  - stl -  st  -  str - |
        |            |           |
     (pl)  - sl - (pc/sc) - sr - (pr)
        |            |           |
        |  - sbl -  sb  -  sbr - |
        |            |           |
      (pbl)  ----   (pb) ----  (pbr)

    **********************************/

    // sample normal map
    vec3 pixelNormalBottomLeft  = adjustNormal(normalToView(view, sampleNormal(normalMap, uvBottomLeft)), pixelViewBottomLeft);
    vec3 pixelNormalBottom      = adjustNormal(normalToView(view, sampleNormal(normalMap, uvBottom)), pixelViewBottom);
    vec3 pixelNormalBottomRight = adjustNormal(normalToView(view, sampleNormal(normalMap, uvBottomRight)), pixelViewBottomRight);
    vec3 pixelNormalLeft        = adjustNormal(normalToView(view, sampleNormal(normalMap, uvLeft)), pixelViewLeft);
    vec3 pixelNormalCenter      = adjustNormal(normalToView(view, sampleNormal(normalMap, uvCenter)), pixelViewCenter);
    vec3 pixelNormalRight       = adjustNormal(normalToView(view, sampleNormal(normalMap, uvRight)), pixelViewRight);
    vec3 pixelNormalTopLeft     = adjustNormal(normalToView(view, sampleNormal(normalMap, uvTopLeft)), pixelViewTopLeft);
    vec3 pixelNormalTop         = adjustNormal(normalToView(view, sampleNormal(normalMap, uvTop)), pixelViewTop);
    vec3 pixelNormalTopRight    = adjustNormal(normalToView(view, sampleNormal(normalMap, uvTopRight)), pixelViewTopRight);

    // find plane points
    vec3 rayOrigin = vec3(0.0, 0.0, 0.0);
    vec3 rayDirection;

    rayDirection = normalize(ndcToView(projectionInverse, surfelNDCBottomLeft, 1.0) - rayOrigin);
    vec3 surfelViewBottomLeftPlane = planeRayIntersection(rayOrigin, rayDirection, pixelViewCenter, pixelNormalCenter);
    vec3 surfelViewBottomLeftPlanePixelBottomLeft = planeRayIntersection(rayOrigin, rayDirection, pixelViewBottomLeft, pixelNormalBottomLeft);
    vec3 surfelViewBottomLeftPlanePixelBottom = planeRayIntersection(rayOrigin, rayDirection, pixelViewBottom, pixelNormalBottom);
    vec3 surfelViewBottomLeftPlanePixelLeft = planeRayIntersection(rayOrigin, rayDirection, pixelViewLeft, pixelNormalLeft);

    rayDirection = normalize(ndcToView(projectionInverse, surfelNDCBottom, 1.0) - rayOrigin);
    vec3 surfelViewBottomPlane = planeRayIntersection(rayOrigin, rayDirection, pixelViewCenter, pixelNormalCenter);
    vec3 surfelViewBottomPlanePixelBottom = planeRayIntersection(rayOrigin, rayDirection, pixelViewBottom, pixelNormalBottom);

    rayDirection = normalize(ndcToView(projectionInverse, surfelNDCBottomRight, 1.0) - rayOrigin);
    vec3 surfelViewBottomRightPlane = planeRayIntersection(rayOrigin, rayDirection, pixelViewCenter, pixelNormalCenter);
    vec3 surfelViewBottomRightPlanePixelBottomRight = planeRayIntersection(rayOrigin, rayDirection, pixelViewBottomRight, pixelNormalBottomRight);
    vec3 surfelViewBottomRightPlanePixelBottom = planeRayIntersection(rayOrigin, rayDirection, pixelViewBottom, pixelNormalBottom);
    vec3 surfelViewBottomRightPlanePixelRight = planeRayIntersection(rayOrigin, rayDirection, pixelViewRight, pixelNormalRight);

    rayDirection = normalize(ndcToView(projectionInverse, surfelNDCLeft, 1.0) - rayOrigin);
    vec3 surfelViewLeftPlane = planeRayIntersection(rayOrigin, rayDirection, pixelViewCenter, pixelNormalCenter);
    vec3 surfelViewLeftPlanePixelLeft = planeRayIntersection(rayOrigin, rayDirection, pixelViewLeft, pixelNormalLeft);

    rayDirection = normalize(ndcToView(projectionInverse, surfelNDCRight, 1.0) - rayOrigin);
    vec3 surfelViewRightPlane = planeRayIntersection(rayOrigin, rayDirection, pixelViewCenter, pixelNormalCenter);
    vec3 surfelViewRightPlanePixelRight = planeRayIntersection(rayOrigin, rayDirection, pixelViewRight, pixelNormalRight);

    rayDirection = normalize(ndcToView(projectionInverse, surfelNDCTopLeft, 1.0) - rayOrigin);
    vec3 surfelViewTopLeftPlane = planeRayIntersection(rayOrigin, rayDirection, pixelViewCenter, pixelNormalCenter);
    vec3 surfelViewTopLeftPlanePixelTopLeft = planeRayIntersection(rayOrigin, rayDirection, pixelViewTopLeft, pixelNormalTopLeft);
    vec3 surfelViewTopLeftPlanePixelLeft = planeRayIntersection(rayOrigin, rayDirection, pixelViewLeft, pixelNormalLeft);
    vec3 surfelViewTopLeftPlanePixelTop = planeRayIntersection(rayOrigin, rayDirection, pixelViewTop, pixelNormalTop);

    rayDirection = normalize(ndcToView(projectionInverse, surfelNDCTop, 1.0) - rayOrigin);
    vec3 surfelViewTopPlane = planeRayIntersection(rayOrigin, rayDirection, pixelViewCenter, pixelNormalCenter);
    vec3 surfelViewTopPlanePixelTop = planeRayIntersection(rayOrigin, rayDirection, pixelViewTop, pixelNormalTop);

    rayDirection = normalize(ndcToView(projectionInverse, surfelNDCTopRight, 1.0) - rayOrigin);
    vec3 surfelViewTopRightPlane = planeRayIntersection(rayOrigin, rayDirection, pixelViewCenter, pixelNormalCenter);
    vec3 surfelViewTopRightPlanePixelTopRight = planeRayIntersection(rayOrigin, rayDirection, pixelViewTopRight, pixelNormalTopRight);
    vec3 surfelViewTopRightPlanePixelTop = planeRayIntersection(rayOrigin, rayDirection, pixelViewTop, pixelNormalTop);
    vec3 surfelViewTopRightPlanePixelRight = planeRayIntersection(rayOrigin, rayDirection, pixelViewRight, pixelNormalRight);

    // adjust points
    float dist1, dist2, dist3;
    float n;

    vec3 surfelViewBottomLeft = findQuadPointCorner(
        surfelNDCBottomLeft,
        surfelViewBottomLeftPlane,
        surfelViewBottomLeftPlanePixelBottomLeft,
        surfelViewBottomLeftPlanePixelBottom,
        surfelViewBottomLeftPlanePixelLeft,
        pixelDepthCenter, pixelDepthBottomLeft, pixelDepthBottom, pixelDepthLeft
    );

    vec3 surfelViewBottom = findQuadPointEdge(
        surfelNDCBottom,
        surfelViewBottomPlane,
        surfelViewBottomPlanePixelBottom,
        pixelDepthCenter, pixelDepthBottom
    );

    vec3 surfelViewBottomRight = findQuadPointCorner(
        surfelNDCBottomRight,
        surfelViewBottomRightPlane,
        surfelViewBottomRightPlanePixelBottomRight,
        surfelViewBottomRightPlanePixelBottom,
        surfelViewBottomRightPlanePixelRight,
        pixelDepthCenter, pixelDepthBottomRight, pixelDepthBottom, pixelDepthRight
    );

    vec3 surfelViewLeft = findQuadPointEdge(
        surfelNDCLeft,
        surfelViewLeftPlane,
        surfelViewLeftPlanePixelLeft,
        pixelDepthCenter, pixelDepthLeft
    );

    vec3 surfelViewRight = findQuadPointEdge(
        surfelNDCRight,
        surfelViewRightPlane,
        surfelViewRightPlanePixelRight,
        pixelDepthCenter, pixelDepthRight
    );

    vec3 surfelViewTopLeft = findQuadPointCorner(
        surfelNDCTopLeft,
        surfelViewTopLeftPlane,
        surfelViewTopLeftPlanePixelTopLeft,
        surfelViewTopLeftPlanePixelTop,
        surfelViewTopLeftPlanePixelLeft,
        pixelDepthCenter, pixelDepthTopLeft, pixelDepthTop, pixelDepthLeft
    );

    vec3 surfelViewTop = findQuadPointEdge(
        surfelNDCTop,
        surfelViewTopPlane,
        surfelViewTopPlanePixelTop,
        pixelDepthCenter, pixelDepthTop
    );

    vec3 surfelViewTopRight = findQuadPointCorner(
        surfelNDCTopRight,
        surfelViewTopRightPlane,
        surfelViewTopRightPlanePixelTopRight,
        surfelViewTopRightPlanePixelTop,
        surfelViewTopRightPlanePixelRight,
        pixelDepthCenter, pixelDepthTopRight, pixelDepthTop, pixelDepthRight
    );

    uint x = shaderIndex % uint(size.x);
    uint y = shaderIndex / uint(size.x);

    /**********************

     (stl) - (st) - str
        |     |     |
      (sl) - (sc) - sr
        |     |     |
       sbl - sb - sbr

    **********************/
    createSubQuad(
        surfelViewTopLeft, surfelViewTop, surfelViewLeft, surfelViewCenter,
        x, y + 0.5, size,
        shaderIndex, 0 * VERTICES_IN_A_QUAD, 0 * INDICES_IN_A_QUAD
    );

    /**********************

       stl - (st) - (str)
        |     |       |
        sl - (sc) - (sr)
        |     |       |
       sbl -  sb  -  sbr

    **********************/
    createSubQuad(
        surfelViewTop, surfelViewTopRight, surfelViewCenter, surfelViewRight,
        x + 0.5, y + 0.5, size,
        shaderIndex, 1 * VERTICES_IN_A_QUAD, 1 * INDICES_IN_A_QUAD
    );

    /**********************

        stl -  st - str
        |      |     |
       (sl) - (sc) - sr
        |      |     |
      (sbl) - (sb) - sbr

    **********************/
    createSubQuad(
        surfelViewLeft, surfelViewCenter, surfelViewBottomLeft, surfelViewBottom,
        x, y, size,
        shaderIndex, 2 * VERTICES_IN_A_QUAD, 2 * INDICES_IN_A_QUAD
    );

    /**********************

        stl -  st - str
        |      |     |
        sl - (sc) - (sr)
        |      |     |
       sbl - (sb) - (sbr)

    **********************/
    createSubQuad(
        surfelViewCenter, surfelViewRight, surfelViewBottom, surfelViewBottomRight,
        x + 0.5, y, size,
        shaderIndex, 3 * VERTICES_IN_A_QUAD, 3 * INDICES_IN_A_QUAD
    );

    verticesDepth[shaderIndex].position = viewToWorld(viewInverse, pixelViewCenter);
    verticesDepth[shaderIndex].color = vec3(1.0, 1.0, 1.0);
    verticesDepth[shaderIndex].texCoords = worldToScreen(view, projection, viewToWorld(viewInverse, pixelViewCenter));
}
