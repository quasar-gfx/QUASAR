layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D positionMap;
layout(binding = 1) uniform sampler2D normalMap;
layout(binding = 2) uniform sampler2D idMap;
layout(binding = 3) uniform sampler2D depthMap;

struct Vertex {
    uint id;
    vec3 position;
    vec3 color;
    vec3 normal;
    vec2 texCoords;
    vec3 tangent;
    vec3 bitangent;
};

layout(std430, binding = 0) buffer VertexBuffer {
    Vertex vertices[];
};

layout(std430, binding = 1) buffer IndexBuffer {
    uint indices[];
};

uniform vec2 screenSize;

uniform mat4 view;
uniform mat4 projection;
uniform mat4 viewInverse;
uniform mat4 projectionInverse;

uniform float near;
uniform float far;

uniform int surfelSize;

#define VERTICES_IN_A_QUAD  4
#define INDICES_IN_A_QUAD   6
#define NUM_SUB_QUADS       4

vec3 ndcToView(vec2 ndc, float depth) {
    vec4 ndcPos;
    ndcPos.xy = ndc;
    ndcPos.z = 2.0 * depth - 1.0;
    ndcPos.w = 1.0;

    vec4 viewCoord = projectionInverse * ndcPos;
    viewCoord = viewCoord / viewCoord.w;
    return viewCoord.xyz;
}

vec3 viewToWorld(vec3 viewspaceCoord) {
    vec4 worldCoord = viewInverse * vec4(viewspaceCoord, 1.0);
    worldCoord = worldCoord / worldCoord.w;
    return worldCoord.xyz;
}

vec3 worldToView(mat4 view, vec3 worldCoord) {
    vec4 viewCoord = view * vec4(worldCoord, 1.0);
    viewCoord = viewCoord / viewCoord.w;
    return viewCoord.xyz;
}

vec2 viewToNDC(vec3 viewCoord) {
    vec4 ndcCoord = projection * vec4(viewCoord, 1.0);
    ndcCoord = ndcCoord / ndcCoord.w;
    return ndcCoord.xy;
}

vec2 ndcToScreen(vec2 ndc) {
    return (ndc + 1.0) / 2.0;
}

vec2 worldToScreen(mat4 view, vec3 worldCoord) {
    vec2 ndc = viewToNDC(worldToView(view, worldCoord));
    return ndcToScreen(ndc);
}

vec3 sampleNormal(sampler2D normalMap, vec2 sampleCoord) {
    return normalize(texture(normalMap, sampleCoord).xyz);
}

float sampleDepth(sampler2D depthMap, vec2 sampleCoord) {
    return texture(depthMap, sampleCoord).x;
}

float LinearizeDepth(float depth) {
    float z = depth * 2.0 - 1.0; // back to NDC
    return (2.0 * near * far) / (far + near - z * (far - near));
}

vec3 planeRayIntersection(vec3 rayOrigin, vec3 rayDirection, vec3 planeNormal, vec3 planePoint) {
    float t = dot(planeNormal, planePoint - rayOrigin) / dot(planeNormal, rayDirection);
    return rayOrigin + t * rayDirection;
}

void createSubQuad(
        vec3 viewCoordTopLeft, vec3 viewCoordTopRight, vec3 viewCoordBottomLeft, vec3 viewCoordBottomRight,
        float x, float y, vec2 size,
        uint shaderIndex, uint vertexOffset, uint indexOffset)
{
    /************************

            tl -- tr
            |   / |
            | /   |
            bl -- br

    ************************/

    uint vertexIndexTopLeft = shaderIndex * NUM_SUB_QUADS * VERTICES_IN_A_QUAD + vertexOffset + 0;
    vertices[vertexIndexTopLeft].position = viewToWorld(viewCoordTopLeft);
    vertices[vertexIndexTopLeft].color = vec3(1.0, 1.0, 1.0);
    vertices[vertexIndexTopLeft].texCoords = worldToScreen(view, viewToWorld(viewCoordTopLeft));

    uint vertexIndexTopRight = shaderIndex * NUM_SUB_QUADS * VERTICES_IN_A_QUAD + vertexOffset + 1;
    vertices[vertexIndexTopRight].position = viewToWorld(viewCoordTopRight);
    vertices[vertexIndexTopRight].color = vec3(1.0, 1.0, 1.0);
    vertices[vertexIndexTopRight].texCoords = worldToScreen(view, viewToWorld(viewCoordTopRight));

    uint vertexIndexBottomLeft = shaderIndex * NUM_SUB_QUADS * VERTICES_IN_A_QUAD + vertexOffset + 2;
    vertices[vertexIndexBottomLeft].position = viewToWorld(viewCoordBottomLeft);
    vertices[vertexIndexBottomLeft].color = vec3(1.0, 1.0, 1.0);
    vertices[vertexIndexBottomLeft].texCoords = worldToScreen(view, viewToWorld(viewCoordBottomLeft));

    uint vertexIndexBottomRight = shaderIndex * NUM_SUB_QUADS * VERTICES_IN_A_QUAD + vertexOffset + 3;
    vertices[vertexIndexBottomRight].position = viewToWorld(viewCoordBottomRight);
    vertices[vertexIndexBottomRight].color = vec3(1.0, 1.0, 1.0);
    vertices[vertexIndexBottomRight].texCoords = worldToScreen(view, viewToWorld(viewCoordBottomRight));

    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 0] = vertexIndexTopLeft;
    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 1] = vertexIndexTopRight;
    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 2] = vertexIndexBottomLeft;

    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 3] = vertexIndexTopRight;
    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 4] = vertexIndexBottomRight;
    indices[shaderIndex * NUM_SUB_QUADS * 6 + indexOffset + 5] = vertexIndexBottomLeft;
}

void main() {
    vec2 size = vec2(screenSize) / float(surfelSize);

    uint shaderIndex = uint(gl_GlobalInvocationID.y * size.x + gl_GlobalInvocationID.x);

    /************************

      (ptl)  ----   (pt) ----  (ptr)
        |            |           |
        |  - stl -  st  -  str - |
        |            |           |
     (pl)  - sl - (pc/sc) - sr - (pr)
        |            |           |
        |  - sbl -  sb  -  sbr - |
        |            |           |
      (pbl)  ----   (pb) ----  (pbr)

    ************************/

    vec2 surfelCoordBottomLeft  = vec2(gl_GlobalInvocationID.xy);

    vec2 pixelCoordBottomLeft  = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(-1.0, -1.0));
    vec2 pixelCoordBottom      = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+0.0, -1.0));
    vec2 pixelCoordBottomRight = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+1.0, -1.0));
    vec2 pixelCoordLeft        = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(-1.0, +0.0));
    vec2 pixelCoordCenter      = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+0.0, +0.0));
    vec2 pixelCoordRight       = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+1.0, +0.0));
    vec2 pixelCoordTopLeft     = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(-1.0, +1.0));
    vec2 pixelCoordTop         = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+0.0, +1.0));
    vec2 pixelCoordTopRight    = surfelSize * (surfelCoordBottomLeft + vec2(0.5, 0.5) + vec2(+1.0, +1.0));

    vec2 surfelCoordBottom      = surfelSize * (surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(0.5, 0.0));
    vec2 surfelCoordBottomRight = surfelSize * (surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(1.0, 0.0));
    vec2 surfelCoordLeft        = surfelSize * (surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(0.0, 0.5));
    vec2 surfelCoordCenter      = pixelCoordCenter;
    vec2 surfelCoordRight       = surfelSize * (surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(1.0, 0.5));
    vec2 surfelCoordTopLeft     = surfelSize * (surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(0.0, 1.0));
    vec2 surfelCoordTop         = surfelSize * (surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(0.5, 1.0));
    vec2 surfelCoordTopRight    = surfelSize * (surfelCoordBottomLeft + vec2(0.0, 0.0) + vec2(1.0, 1.0));

    vec2 uvBottomLeft  = pixelCoordBottomLeft  / screenSize;
    vec2 uvBottom      = pixelCoordBottom      / screenSize;
    vec2 uvBottomRight = pixelCoordBottomRight / screenSize;
    vec2 uvLeft        = pixelCoordLeft        / screenSize;
    vec2 uvCenter      = pixelCoordCenter      / screenSize;
    vec2 uvRight       = pixelCoordRight       / screenSize;
    vec2 uvTopLeft     = pixelCoordTopLeft     / screenSize;
    vec2 uvTop         = pixelCoordTop         / screenSize;
    vec2 uvTopRight    = pixelCoordTopRight    / screenSize;

    float pixelDepthBottomLeft  = sampleDepth(depthMap, uvBottomLeft);
    float pixelDepthBottom      = sampleDepth(depthMap, uvBottom);
    float pixelDepthBottomRight = sampleDepth(depthMap, uvBottomRight);
    float pixelDepthLeft        = sampleDepth(depthMap, uvLeft);
    float pixelDepthCenter      = sampleDepth(depthMap, uvCenter);
    float pixelDepthRight       = sampleDepth(depthMap, uvRight);
    float pixelDepthTopLeft     = sampleDepth(depthMap, uvTopLeft);
    float pixelDepthTop         = sampleDepth(depthMap, uvTop);
    float pixelDepthTopRight    = sampleDepth(depthMap, uvTopRight);

    vec2 surfelNDCBottomLeft  = 2.0 * (surfelCoordBottomLeft / screenSize) - 1.0;
    vec2 surfelNDCBottom      = 2.0 * (surfelCoordBottom / screenSize) - 1.0;
    vec2 surfelNDCBottomRight = 2.0 * (surfelCoordBottomRight / screenSize) - 1.0;
    vec2 surfelNDCLeft        = 2.0 * (surfelCoordLeft / screenSize) - 1.0;
    vec2 surfelNDCCenter      = 2.0 * (surfelCoordCenter / screenSize) - 1.0;
    vec2 surfelNDCRight       = 2.0 * (surfelCoordRight / screenSize) - 1.0;
    vec2 surfelNDCTopLeft     = 2.0 * (surfelCoordTopLeft / screenSize) - 1.0;
    vec2 surfelNDCTop         = 2.0 * (surfelCoordTop / screenSize) - 1.0;
    vec2 surfelNDCTopRight    = 2.0 * (surfelCoordTopRight / screenSize) - 1.0;

    float surfelDepthBottomLeft  = (pixelDepthCenter + pixelDepthBottomLeft + pixelDepthLeft + pixelDepthBottom) / 4;
    float surfelDepthBottom      = (pixelDepthCenter + pixelDepthBottom) / 2;
    float surfelDepthBottomRight = (pixelDepthCenter + pixelDepthBottomRight + pixelDepthRight + pixelDepthBottom) / 4;
    float surfelDepthLeft        = (pixelDepthCenter + pixelDepthLeft) / 2;
    float surfelDepthCenter      = (pixelDepthCenter);
    float surfelDepthRight       = (pixelDepthCenter + pixelDepthRight) / 2;
    float surfelDepthTopLeft     = (pixelDepthCenter + pixelDepthTopLeft + pixelDepthLeft + pixelDepthTop) / 4;
    float surfelDepthTop         = (pixelDepthCenter + pixelDepthTop) / 2;
    float surfelDepthTopRight    = (pixelDepthCenter + pixelDepthTopRight + pixelDepthRight + pixelDepthTop) / 4;

    vec3 surfelViewBottomLeft  = ndcToView(surfelNDCBottomLeft, surfelDepthBottomLeft);
    vec3 surfelViewBottom      = ndcToView(surfelNDCBottom, surfelDepthBottom);
    vec3 surfelViewBottomRight = ndcToView(surfelNDCBottomRight, surfelDepthBottomRight);
    vec3 surfelViewLeft        = ndcToView(surfelNDCLeft, surfelDepthLeft);
    vec3 surfelViewCenter      = ndcToView(surfelNDCCenter, surfelDepthCenter);
    vec3 surfelViewRight       = ndcToView(surfelNDCRight, surfelDepthRight);
    vec3 surfelViewTopLeft     = ndcToView(surfelNDCTopLeft, surfelDepthTopLeft);
    vec3 surfelViewTop         = ndcToView(surfelNDCTop, surfelDepthTop);
    vec3 surfelViewTopRight    = ndcToView(surfelNDCTopRight, surfelDepthTopRight);

    uint x = shaderIndex % uint(size.x);
    uint y = shaderIndex / uint(size.x);

    /**********************

     (stl) - (st) - str
        |     |     |
      (sl) - (sc) - sr
        |     |     |
       sbl - sb - sbr

    **********************/
    createSubQuad(
        surfelViewTopLeft, surfelViewTop, surfelViewLeft, surfelViewCenter,
        x, y + 0.5, size,
        shaderIndex, 0 * VERTICES_IN_A_QUAD, 0 * INDICES_IN_A_QUAD
    );

    /**********************

       stl - (st) - (str)
        |     |       |
        sl - (sc) - (sr)
        |     |       |
       sbl -  sb  -  sbr

    **********************/
    createSubQuad(
        surfelViewTop, surfelViewTopRight, surfelViewCenter, surfelViewRight,
        x + 0.5, y + 0.5, size,
        shaderIndex, 1 * VERTICES_IN_A_QUAD, 1 * INDICES_IN_A_QUAD
    );

    /**********************

        stl -  st - str
        |      |     |
       (sl) - (sc) - sr
        |      |     |
      (sbl) - (sb) - sbr

    **********************/
    createSubQuad(
        surfelViewLeft, surfelViewCenter, surfelViewBottomLeft, surfelViewBottom,
        x, y, size,
        shaderIndex, 2 * VERTICES_IN_A_QUAD, 2 * INDICES_IN_A_QUAD
    );

    /**********************

        stl -  st - str
        |      |     |
        sl - (sc) - (sr)
        |      |     |
       sbl - (sb) - (sbr)

    **********************/
    createSubQuad(
        surfelViewCenter, surfelViewRight, surfelViewBottom, surfelViewBottomRight,
        x + 0.5, y, size,
        shaderIndex, 3 * VERTICES_IN_A_QUAD, 3 * INDICES_IN_A_QUAD
    );
}
